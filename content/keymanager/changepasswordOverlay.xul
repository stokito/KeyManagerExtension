<?xml version="1.0"?>
<!-- @(#) $Id: changepasswordOverlay.xul,v 1.7 2012/10/07 17:19:40 subrata Exp $ -->

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Avaya Labs Research, Avaya Inc. Code.
   -
   - The Initial Developer of the Original Code is
   - Subrata Mazumdar, Avaya Labs Research, Avaya Inc.
   - Portions created by the Initial Developer are Copyright (C) 2007.
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   Subrata Mazumdar (mazum@avaya.com)
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->


<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>

<!DOCTYPE overlay SYSTEM "chrome://keymanager/locale/keyManager.dtd">

<!--
FIPS compatible password must be 
    - at least seven characters long
    - must consist of characters from three or more character classes:
    	- digits (0-9),
	- ASCII lowercase letters,
	- ASCII uppercase letters,
	- ASCII non-alphanumeric (such as space and punctuation marks), and
	- non-ASCII characters.
If an ASCII uppercase letter is the first character of the password, the uppercase letter is not counted toward its
character class. Similarly, if a digit is the last character of the password, the digit is
not counted toward its character class.

For more info: http://csrc.nist.gov/groups/STM/cmvp/documents/140-1/140sp/140sp814.pdf
-->

<!--
Installation instructions: 
Add the following line in the chrome.manifest file:
    overlay chrome://pippki/content/changepassword.xul  chrome://keymanager/content/changepasswordOverlay.xul
-->

<overlay id="changepasswordOverlayWin"
    xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    >

<script type="application/x-javascript">
<![CDATA[

window.addEventListener(
    "load",
    function(e){
	avpki.keymanager.ChangePasswordOverlay.init();
    },
    true
);

if ((typeof avpki) == 'undefined') {
    var avpki = {};
    avpki.keymanager = {};
}
if ((typeof avpki.keymanager) == 'undefined') {
    avpki.keymanager = {};
}
avpki.keymanager.ChangePasswordOverlay = {

    /* nsIPKCS11ModuleDB */ mPKCS11ModuleDB : null,

    mShowFIPSDetails : false,

    mMaxLogLevel : 2,
    log : function(level, msg)
    {
	if (level > avpki.keymanager.ChangePasswordOverlay.mMaxLogLevel) {
	    return;
	}
	dump(msg + "\n");
    },

    logError : function(msg)
    {
	avpki.keymanager.ChangePasswordOverlay.log(2, msg);
    },
    logTrace : function(msg)
    {
	avpki.keymanager.ChangePasswordOverlay.log(4, msg);
    },
    logDebug : function(msg)
    {
	avpki.keymanager.ChangePasswordOverlay.log(8, msg);
    },

    init : function () 
    {
	avpki.keymanager.ChangePasswordOverlay.logTrace("avpki.keymanager.ChangePasswordOverlay.init():......................Start.");

    	avpki.keymanager.ChangePasswordOverlay.mPKCS11ModuleDB = Components.classes["@mozilla.org/security/pkcs11moduledb;1"]
					.getService(Components.interfaces.nsIPKCS11ModuleDB);

	avpki.keymanager.ChangePasswordOverlay.logDebug("avpki.keymanager.ChangePasswordOverlay.init(): isFIPSEnabled: " + avpki.keymanager.ChangePasswordOverlay.mPKCS11ModuleDB.isFIPSEnabled + "");

	// Show the fips-compatible indicators, if FIPS-enabled.
	var fipsCompatibleGBoxElem = document.getElementById('keymgr.changepw.fips.compatible.gbox');
	fipsCompatibleGBoxElem.hidden = !avpki.keymanager.ChangePasswordOverlay.mPKCS11ModuleDB.isFIPSEnabled;

	if (!avpki.keymanager.ChangePasswordOverlay.mPKCS11ModuleDB.isFIPSEnabled) {
	    avpki.keymanager.ChangePasswordOverlay.logTrace("avpki.keymanager.ChangePasswordOverlay.init():......................End(0).");
	    return;
	}

	var showFIPSValidationStatus = false;
	do {
            try {
    	        var Prefs = Components.classes["@mozilla.org/preferences-service;1"]
			        .getService(Components.interfaces.nsIPrefService);

	        var prefBranchPrefixId = "";
	        var prefsBranch = Prefs.getBranch(prefBranchPrefixId);
	        if (!prefsBranch) {
	    	    break;
	        }

                var prefBoolValue = prefsBranch.getBoolPref("extensions.avpki.changepw.fips.compatible.details");
	        if (prefBoolValue) {
	    	    showFIPSValidationStatus = true;
	        }
            } catch (ex) { }
	} while (0);
	fipsCompatibleGBoxElem.hidden = !showFIPSValidationStatus;
	// var fipsCompatibleGridElem = document.getElementById('keymgr.changepw.fips.compatible.grid');
	// fipsCompatibleGridElem.hidden = !showDetails;
	if (!showFIPSValidationStatus) {
	    avpki.keymanager.ChangePasswordOverlay.logTrace("avpki.keymanager.ChangePasswordOverlay.init():......................End(1).");
	    return;
	}

	// If FIPS-compatible, then add the compatibility checking to the password textbox.
	var pw1Elem = document.getElementById('pw1');
	pw1Elem.setAttribute(
	    	"oninput",
	    	"setPasswordStrength(); avpki.keymanager.ChangePasswordOverlay.checkFIPSCompatiblePassWord(this, event); checkPasswords();"
		);

	var fipsCompatibleValidateElem	= document.getElementById('keymgr.changepw.fips.compatible.validate.password');
	pw1Elem.setAttribute("tooltiptext", fipsCompatibleValidateElem.getAttribute("ztooltiptext"));


	avpki.keymanager.ChangePasswordOverlay.logTrace("avpki.keymanager.ChangePasswordOverlay.init():......................End.");
    },

    checkFIPSCompatiblePassWord : function (aPWElem, ev) 
    {
	avpki.keymanager.ChangePasswordOverlay.logTrace("avpki.keymanager.ChangePasswordOverlay.checkFIPSCompatiblePassWord():......................Start.");

	var fipsCompatibleValidateElem	= document.getElementById('keymgr.changepw.fips.compatible.validate.password');

	var lengthElem		= document.getElementById('keymgr.changepw.fips.compatible.length');
	var lowercaseElem	= document.getElementById('keymgr.changepw.fips.compatible.lowercase');
	var uppercaseElem	= document.getElementById('keymgr.changepw.fips.compatible.uppercase');
	var numericElem		= document.getElementById('keymgr.changepw.fips.compatible.number');
	var symbolElem		= document.getElementById('keymgr.changepw.fips.compatible.symbol');
	var nonasciiElem	= document.getElementById('keymgr.changepw.fips.compatible.nonascii');

	var count = 0;

	var pw = aPWElem.value;
	avpki.keymanager.ChangePasswordOverlay.logDebug("avpki.keymanager.ChangePasswordOverlay.checkFIPSCompatiblePassWord(): pw.length: " + pw.length);

	var length7chars = ((pw.length >= 7) ? true : false);
	lengthElem.checked = length7chars;

	var nonLowercasePW = pw.replace (/[a-z]/g, "");
	var lowercase = (((pw.length - nonLowercasePW.length) > 0) ? true : false);
	avpki.keymanager.ChangePasswordOverlay.logDebug("avpki.keymanager.ChangePasswordOverlay.checkFIPSCompatiblePassWord(): lowercase: " + lowercase);
	lowercaseElem.checked = lowercase;
	count += lowercase;

	var uppercase = false;
	// The pw length must be greater than 1 for an uppercase to be non-last character
	if (pw.length > 1) {
	    // Ignore the uppercase character if it is the first one.
	    var nonUppercasePW = pw.substring(1).replace (/[A-Z]/g, "");
	    uppercase = ((((pw.length - 1) - nonUppercasePW.length) > 0) ? true : false);
	}
	avpki.keymanager.ChangePasswordOverlay.logDebug("avpki.keymanager.ChangePasswordOverlay.checkFIPSCompatiblePassWord(): uppercase: " + uppercase);
	uppercaseElem.checked = uppercase;
	count += uppercase;

	var digit = false;
	// The pw length must be greater than 1 for a digit to be non-last character
	if (pw.length > 1) {
	    // Ignore the digit if it is the last character.
	    var nonNumericPW = pw.substring(0, (pw.length -1)).replace (/[0-9]/g, "");
	    digit = ((((pw.length - 1) - nonNumericPW.length) > 0) ? true : false);
	}
	avpki.keymanager.ChangePasswordOverlay.logDebug("avpki.keymanager.ChangePasswordOverlay.checkFIPSCompatiblePassWord(): digit: " + digit);
	numericElem.checked = digit;
	count += digit;

	var nonSymbolPW = pw.replace (/\W/g, "");
	var symbol = (((pw.length - nonSymbolPW.length) > 0) ? true : false);
	avpki.keymanager.ChangePasswordOverlay.logDebug("avpki.keymanager.ChangePasswordOverlay.checkFIPSCompatiblePassWord(): symbol: " + symbol);
	symbolElem.checked = symbol;
	count += symbol;

	// TODO: Implement non-Ascii compability test.

	avpki.keymanager.ChangePasswordOverlay.logDebug("avpki.keymanager.ChangePasswordOverlay.checkFIPSCompatiblePassWord(): count: " +  count + "");

	var fipsCompatible = false;
	if (length7chars && (count >= 3)) {
	    fipsCompatible = true;
	}
	avpki.keymanager.ChangePasswordOverlay.logDebug("avpki.keymanager.ChangePasswordOverlay.checkFIPSCompatiblePassWord(): fipsCompatible: " +  fipsCompatible + "");
	fipsCompatibleValidateElem.checked = fipsCompatible;

	avpki.keymanager.ChangePasswordOverlay.logTrace("avpki.keymanager.ChangePasswordOverlay.checkFIPSCompatiblePassWord():......................End.");
    	return;
    },

    lastMethod : function () 
    {
    }
}


]]>
</script>

<dialog id="set_password"
    >
    <groupbox id="keymgr.changepw.fips.compatible.gbox"
    	xorient="horizontal"
    	pack="start"
	hidden="true"
    	>
	<caption
	    align="center"
	    >
	    <label value="&keymgr.changepw.fips.compatible.validate.label;"/>
    	    <checkbox id="keymgr.changepw.fips.compatible.validate.password"
	        disabled="true"
	        label="&keymgr.changepw.fips.compatible.validate.password.label;"
	    	ztooltiptext="&keymgr.changepw.fips.compatible.password.tooltip;"
	        tooltiptext="&keymgr.changepw.fips.compatible.validate.password.tooltip;"
	        />
	</caption>

        <grid id="keymgr.changepw.fips.compatible.grid"
	    >
	    <columns>
	        <column/>
	        <column/>
	    </columns>
	    <rows>
	        <row
		    align="center"
		    >
    	            <checkbox id="keymgr.changepw.fips.compatible.length"
	                disabled="true"
	                label="&keymgr.changepw.fips.compatible.length.label;"
	                tooltiptext="&keymgr.changepw.fips.compatible.length.tooltip;"
	                />
    	            <checkbox id="keymgr.changepw.fips.compatible.lowercase"
	                disabled="true"
	                label="&keymgr.changepw.fips.compatible.lowercase.label;"
	                tooltiptext="&keymgr.changepw.fips.compatible.lowercase.tooltip;"
	                />
    	            <checkbox id="keymgr.changepw.fips.compatible.uppercase"
	                disabled="true"
	                label="&keymgr.changepw.fips.compatible.uppercase.label;"
	                tooltiptext="&keymgr.changepw.fips.compatible.uppercase.tooltip;"
	                />
	        </row>

	        <row
		    align="center"
		    >
    	            <checkbox id="keymgr.changepw.fips.compatible.number"
	                disabled="true"
	                label="&keymgr.changepw.fips.compatible.number.label;"
	                tooltiptext="&keymgr.changepw.fips.compatible.number.tooltip;"
	                />
    	            <checkbox id="keymgr.changepw.fips.compatible.symbol"
	                disabled="true"
	                label="&keymgr.changepw.fips.compatible.symbol.label;"
	                tooltiptext="&keymgr.changepw.fips.compatible.symbol.tooltip;"
	                />
    	            <checkbox id="keymgr.changepw.fips.compatible.nonascii"
	                disabled="true"
	                label="&keymgr.changepw.fips.compatible.nonascii.label;"
	                tooltiptext="&keymgr.changepw.fips.compatible.nonascii.tooltip;"
	                />
	        </row>
	    </rows>
	</grid>
    </groupbox>
  <!--
  <row id="keymgr.changepw.fips.compatible.row"
    align="center"
    >
    <label value="&keymgr.changepw.fips.compatible.label;"/>
  </row>
  -->

</dialog>

</overlay>


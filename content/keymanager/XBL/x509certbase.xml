<?xml version="1.0"?>
<!-- @(#) $Id: x509certbase.xml,v 1.2 2008/09/24 16:15:08 subrata Exp $ -->

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Avaya Labs Research, Avaya Inc. Code.
   -
   - The Initial Developer of the Original Code is
   - Subrata Mazumdar, Avaya Labs Research, Avaya Inc.
   - Portions created by the Initial Developer are Copyright (C) 2007.
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   Subrata Mazumdar (mazum@avaya.com)
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->



<bindings id="x509certbaseBindings"
    xmlns="http://www.mozilla.org/xbl"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    xmlns:xbl="http://www.mozilla.org/xbl">

    <binding id="x509certbase">
	<resources>
	    <!--
	    <stylesheet src="chrome://keymanager/skin/kmbindings.css"/>
	    -->
	    <stylesheet src="../../skin/kmbindings.css"/>
	</resources>

    	<!-- content, property, method and event descriptions go here -->
    	<content>
    	</content>
	<implementation>
	    <field name="mMaxLogLevel">4</field>
	    <field name="mLogTraceLevel">8</field>
	    <field name="mLogDebugLevel">6</field>
	    <field name="mLogErrorLevel">2</field>
	    <field name="mLogLevel">4</field>

	    <constructor>
		<![CDATA[
		// this.mMaxLogLevel = 9;
		this.LogTrace("x509certbaseBinding.constructor():......................Start.");
		this.LogTrace("x509certbaseBinding.constructor():......................End.");
		]]>
	    </constructor>

	    <method name="refresh">
		<body>
		<![CDATA[
		]]>
		</body>
	    </method>
	    <method name="reset">
		<body>
		<![CDATA[
		]]>
		</body>
	    </method>

	    <method name="dumpProperties">
		<parameter name="aCertProps"/>
		<parameter name="msg"/>
	        <body>
		<![CDATA[

                if (msg) {dump(msg + " ");}
		if (!aCertProps) {
                    dump("Properties {}\n");
		    return;
		}
		var propKeyList = [];
                var propEnum = aCertProps.enumerate();
                while (propEnum.hasMoreElements ()) {
                    var propElem = propEnum.getNext ();
                    var propItem = propElem.QueryInterface (Components.interfaces.nsIPropertyElement);
                    var propKey = propItem.key;
                    // var propValue = propItem.value;
	            // this.LogDebug("    " + propKey + " = " + propValue + "\n");
		    propKeyList[propKeyList.length] = propKey;
                }
		if (propKeyList.length <= 0) {
                    dump("Properties {no elements.}\n");
		    return;
		}
		// this.LogDebug("propKeyList.length: " + propKeyList.length + "\n");

		propKeyList = propKeyList.sort();
		// this.LogDebug("propKeyList.length(sorted): " + propKeyList.length + "");
		dump("Properties {\n");
		for (var i = 0; i < propKeyList.length; i++) {
		    var propKey =  propKeyList[i];
                    var propValue = null;
		    try {
		    	propValue = aCertProps.getStringProperty(propKey);
		    } catch(ex) {}
	            dump("    " + propKey + " = " + propValue + "\n");
                }
                dump("}\n\n");

		]]>
	        </body>
	    </method>

	    <method name="dumpCertProperties">
		<parameter name="aCertProps"/>
		<parameter name="msg"/>
		<body>
		<![CDATA[
		this.dumpProperties(aCertProps, msg);
		]]>
		</body>
	    </method>

	    <method name="Log">
		<parameter name="level"/>
		<parameter name="message"/>
		<body>
		<![CDATA[
		if (level > this.mMaxLogLevel) {
		    return;
		}
		dump("LOG(" + level + ") :  " + message + "\n");
		]]>
		</body>
	    </method>

	    <method name="LogDebug">
		<parameter name="message"/>
		<body>
		<![CDATA[
		this.Log(this.mLogDebugLevel, message);
		]]>
		</body>
	    </method>

	    <method name="LogTrace">
		<parameter name="message"/>
		<body>
		<![CDATA[
		this.Log(this.mLogTraceLevel, message);
		]]>
		</body>
	    </method>

	    <method name="LogError">
		<parameter name="message"/>
		<body>
		<![CDATA[
		this.Log(this.mLogErrorLevel, message);
		]]>
		</body>
	    </method>

	    <method name="trim">
		<parameter name="aStr"/>
		<body>
		<![CDATA[
		// var newStr = (new java.lang.String(aStr)).trim();
		// return newStr;
		if (!aStr) {
		    return aStr;
		}
		var sInString = aStr.replace( /^\s+/g, "" ); // strip leading whitespace
		return sInString.replace( /\s+$/g, "" ); // strip trailing whitespace
		]]>
		</body>
	    </method>

	</implementation>

    </binding>

</bindings>


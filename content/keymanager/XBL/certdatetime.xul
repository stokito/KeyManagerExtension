<?xml version="1.0"?>
<!-- @(#) $Id: certdatetime.xul,v 1.1 2008/07/03 04:38:00 subrata Exp $ -->

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Avaya Labs Research, Avaya Inc. Code.
   -
   - The Initial Developer of the Original Code is
   - Subrata Mazumdar, Avaya Labs Research, Avaya Inc.
   - Portions created by the Initial Developer are Copyright (C) 2007.
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   Subrata Mazumdar (mazum@avaya.com)
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->


<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>

<window id="keymanager.fileselector.win"
    xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    onload="CertDateTime_initWin();">

<script type="application/x-javascript">
<![CDATA[

function CertDateTime_initWin() 
{
    var dateTimeStr = "20080702083842.888Z";
    // var dateTimeStr = "20080702083842.888+0900";
    initGeneralizedTime(dateTimeStr);
}

function initGeneralizedTime(aDateTimeStr) 
{
		// alert("initGeneralizedTime():..............Start.");

		var dateTimeStr = aDateTimeStr;
		if (!dateTimeStr || (dateTimeStr == "")) {
		    throw new String("Invalid Date/Time: " + dateTimeStr);
		}

		var dateStr = "";
		if ((dateTimeStr.length < 13) || (dateTimeStr.length > 23)) {
		    throw new String("Invalid Date/Time: " + dateTimeStr);
		}


		var offset = 0; 
		var year = parseInt(dateTimeStr.substr(offset, 4), 10); offset += 4;
		var month = parseInt(dateTimeStr.substr(offset, 2), 10); offset += 2;
		var day = parseInt(dateTimeStr.substr(offset, 2), 10); offset +=2;
		var hour = parseInt(dateTimeStr.substr(offset, 2), 10); offset +=2;
		var minute = parseInt(dateTimeStr.substr(offset, 2), 10); offset +=2;
		// alert("year: " + year + " month : " + month + " day: " + day + " hour : "  + hour + " minute: " + minute);
		var seconds = parseInt(dateTimeStr.substr(offset, 2), 10);
		if (!seconds) {
		    seconds = parseInt("00");
		}
		else {
		     offset +=2;
		}
		var milliseconds = 0;
		var zone = dateTimeStr.substr(offset, 1); offset += 1;
		if (zone == ".") {
		    milliseconds = parseInt(dateTimeStr.substr(offset, 3), 10);  offset += 3;
		    zone = dateTimeStr.substr(offset, 1); offset += 1;
		}
		alert("seconds: " + seconds + " milliseconds : "  + milliseconds + " zone: " + zone);
		if (!((zone == "+") || (zone == "+") || (zone == "Z"))) {
		    throw new String("Invalid Date/Time: " + dateTimeStr);
		}

		// var utcDateTime = Date.UTC(year, (month-1), day, hour, minute, seconds, milliseconds);
		var utcDate = new Date(); 

		utcDate.setUTCFullYear(year, (month-1), day); 
		utcDate.setUTCHours(hour, minute, seconds);
		if (milliseconds > 0) {
		    utcDate.setUTCMilliseconds(milliseconds);
		}

		alert("initGeneralizedTime(): Base localTime: " + utcDate.toString() + " UTCTime: " + utcDate.toUTCString() + "");
		if (zone == "Z") {
		    return;
		}

		var hourOffset = parseInt(dateTimeStr.substr(offset, 2), 10); offset += 2;
		var minuteOffset = parseInt(dateTimeStr.substr(offset, 2), 10); offset += 2;
		var milisecondOffset = (1000 * ((60 * ((60 * hourOffset) + minuteOffset)) + 0));
		// alert("hourOffset: " + hourOffset + " minuteOffset : "  + minuteOffset + " milisecondOffset: " + milisecondOffset);

		var localTime = utcDate.getTime();

		if (zone == "+") {
		    localTime -= milisecondOffset;
		}
		else {
		    localTime += milisecondOffset;
		}
		utcDate.setTime(localTime);

		alert("initGeneralizedTime(): localTime: " +  utcDate.toString() + " UTCTime: " +  utcDate.toUTCString() + "");

		// alert("initGeneralizedTime():..............End.");
}

function initUTCTime(aDateTimeStr) 
{
		var century = "20";
		var year = parseInt(dateTimeStr.substr(offset, 2), 10); offset += 2;
		if (year >= 70) {
		    century = "19";
		}
}

]]>
</script>

    <grid flex="1" debug="true"> 
        <columns>
          <column/>
          <column flex="5"/>
        </columns>
        <rows flex="1">
          <row>
            <textbox id="keymanager.textbox.1"/>
          </row>
        </rows>
    </grid>
</window>



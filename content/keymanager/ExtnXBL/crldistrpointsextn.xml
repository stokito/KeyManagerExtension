<?xml version="1.0"?>
<!-- @(#) $Id: crldistrpointsextn.xml,v 1.4 2009/04/21 03:41:03 subrata Exp $ -->

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Avaya Labs Research, Avaya Inc. Code.
   -
   - The Initial Developer of the Original Code is
   - Subrata Mazumdar, Avaya Labs Research, Avaya Inc.
   - Portions created by the Initial Developer are Copyright (C) 2007.
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   Subrata Mazumdar (mazum@avaya.com)
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->


<!DOCTYPE bindings SYSTEM "chrome://keymanager/locale/keyManager.dtd">

<bindings id="crldistrpointsextnBindings"
    xmlns="http://www.mozilla.org/xbl"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    xmlns:xbl="http://www.mozilla.org/xbl">

    <binding id="crldistrpointsextnBinding"
	extends="chrome://keymanager/content/ExtnXBL/certextn.xml#certextnbaseBinding"
        >
        <!--
        <resources>
    	    <script type="application/x-javascript" src="chrome://keymanager/content/ExtnXBL/certextn2props.js"/>
	    <stylesheet src="chrome://keymanager/skin/kmbindings.css"/>
        </resources>
        -->
    	<!-- content, property, method and event descriptions go here -->
    	<content>
	    <xul:certextn anonid="certextn.attrcert.crldistrpoints"
	        xbl:inherits="flex,captionlabel,active,activelabel,activetoolip,activePropName,mandatory,critical,criticallabel,criticaltoolip,criticalPropName,listlabel,listtooltip,rows,addlabel,addtooltip,deletelabel,deletetooltip,disabled,readonly"
		flex="1"
		optionsflex="1"
		xcritical="true"
	        captionlabel="CRL Distribution Points"
		activePropName="crlDistributionPoints"
		criticalPropName="crlDistributionPoints-crit"
		mandatoryPropName="crlDistributionPoints-mandatory"
	        >
		<xul:crldistrpoints anonid="certextn.attrcert.crldistrpoints.list"
		    xbl:inherits="listlabel,listtooltip,rows,addlabel,addtooltip,removelabel,removetooltip,readonly,disabled,type=crldistrpointstype,typetooltip=crldistrpointstypetooltip,typedisabled=crldistrpointstypedisabled,valuetooltip=crldistrpointsvaluetooltip,valuedisabled=crldistrpointsvaluedisabled,certPropName=crldistrpointsCertPropName"
		    crldistrpointsCertPropName="crlDistributionPoints-value"
		    certPropName="crlDistributionPoints-value"
		    />
	    </xul:certextn>
    	</content>
	<implementation>

	    <field name="mBaseExtnElem">
		document.getAnonymousElementByAttribute(this, "anonid", "certextn.attrcert.crldistrpoints");
	    </field>
	    <field name="mCRLDistributionPointsElem">
		document.getAnonymousElementByAttribute(this, "anonid", "certextn.attrcert.crldistrpoints.list");
	    </field>

	    <property name="active"
	        onget="return this.mBaseExtnElem.active;"
	    	onset="this.mBaseExtnElem.active = val;return val;"
		/>
	    <property name="critical"
	        onget="return this.mBaseExtnElem.critical;"
	    	onset="this.mBaseExtnElem.critical = val;return val;"
		/>
	    <property name="mandatory"
	        onget="return this.mBaseExtnElem.mandatory;"
	    	onset="this.mBaseExtnElem.mandatory = val;return val;"
		/>
	    <property name="readonly"
	        onget="return this.mBaseExtnElem.readonly;"
	    	onset="this.mBaseExtnElem.readonly = val;
		       this.setReadonly(this.mBaseExtnElem, val);
		       this.mCRLDistributionPointsElem.readonly = val;
		       if(!val) {this.refresh();}
		       return val;"
		/>
	    <property name="disabled"
	        onget="return this.mBaseExtnElem.disabled;"
	    	onset="this.mBaseExtnElem.disabled = val;return val;"
		/>
	    <property name="crldistrpoints"
		onget="return this.mCRLDistributionPointsElem.typedvaluelist;"
		onset="this.mCRLDistributionPointsElem.typedvaluelist=val;return val;"
		/>

	    <constructor>
		<![CDATA[
		// this.LogTrace("crldistrpointsextnBinding.constructor():......................Start.\n");
		this.refresh();
		// this.LogTrace("crldistrpointsextnBinding.constructor():......................End.\n");
		]]>
	    </constructor>

	    <method name="refresh">
	        <body>
		<![CDATA[
		this.mCRLDistributionPointsElem.refresh();

		// Criticality is always true.
		// this.critical = true;
		// this.mBaseExtnElem.criticaldisabled = true;
		]]>
	        </body>
	    </method>

	    <method name="addCRLDistributionPoint">
		<parameter name="aCRLDistributionPointStr"/>
	        <body>
		<![CDATA[
		this.mCRLDistributionPointsElem.addFormattedItemValueToList(aCRLDistributionPointStr);
		]]>
	        </body>
	    </method>

	    <method name="addCRLDistributionPoints">
		<parameter name="aCRLDistributionPointsStr"/>
	        <body>
		<![CDATA[
		if (!aCRLDistributionPointsStr || (aCRLDistributionPointsStr == "")) {
		    this.mCRLDistributionPointsElem.reset();
		    return;
		}
		this.mCRLDistributionPointsElem.addFormattedItemsToList(aCRLDistributionPointsStr);
		]]>
	        </body>
	    </method>

	    <method name="reset">
	        <body>
		<![CDATA[
		this.resetCertExtn(this.mBaseExtnElem);
		this.mBaseExtnElem.reset();
		this.mCRLDistributionPointsElem.reset();

		// Criticality is always true.
		// this.critical = true;
		// this.mBaseExtnElem.criticaldisabled = true;
		]]>
	        </body>
	    </method>

	    <method name="toCertProps">
		<parameter name="aCertProps"/>
	        <body>
		<![CDATA[
		this.LogTrace("crldistrpointsextnBinding.toCertProps():......................Start.\n");

		if (!this.active) {
		    return;
		}

		/*
		var crlDistrPointsValue = this.crldistrpoints;
		this.LogDebug("crldistrpointsextnBinding.toCertProps(): crlDistrPointsValue: >" + crlDistrPointsValue + "<\n");

		if (crlDistrPointsValue == "") {
		    return;
		}
		// aCertProps.setStringProperty("crlDistributionPoints-value", crlDistrPointsValue);
		*/

		this.certExtnToProps(this.mBaseExtnElem, aCertProps);

		// this.dumpProperties(aCertProps, "crldistrpointsextnBinding.aCertProps");

		this.LogTrace("crldistrpointsextnBinding.toCertProps():......................End.\n");
		]]>
	        </body>
	    </method>

	    <method name="updateCertProps">
		<parameter name="aCertProps"/>
	        <body>
		<![CDATA[
		if (! this.containsAnyProperty(this.mBaseExtnElem, aCertProps)) {
		    return;
		}

		this.reset();
		this.updateCertExtnProps(this.mBaseExtnElem, aCertProps);
		/*
		var crlDistrPoints = aCertProps.getStringProperty("crlDistributionPoints-value");
		if (crlDistrPoints) {
		    this.crldistrpoints = crlDistrPoints;
		}
		*/
		this.refresh();
		]]>
	        </body>
	    </method>

	    <method name="mergeCertProps">
		<parameter name="aCertProps"/>
	        <body>
		<![CDATA[
		if (! this.containsAnyProperty(this.mBaseExtnElem, aCertProps)) {
		    return;
		}

		this.updateCertExtnProps(this.mBaseExtnElem, aCertProps, true);

		/*
		var crlDistrPoints = aCertProps.getStringProperty("crlDistributionPoints-value");
		if (crlDistrPoints) {
		    this.crldistrpoints = crlDistrPoints;
		}
		*/
		this.refresh();
		]]>
	        </body>
	    </method>

	</implementation>
    </binding>

</bindings>


<?xml version="1.0"?>
<!-- @(#) $Id: nsx509extns.xml,v 1.11 2009/04/20 02:07:13 subrata Exp $ -->

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Avaya Labs Research, Avaya Inc. Code.
   -
   - The Initial Developer of the Original Code is
   - Subrata Mazumdar, Avaya Labs Research, Avaya Inc.
   - Portions created by the Initial Developer are Copyright (C) 2007.
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   Subrata Mazumdar (mazum@avaya.com)
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->


<!DOCTYPE bindings SYSTEM "chrome://keymanager/locale/keyManager.dtd">

<bindings id="nsx509extnBindings"
    xmlns="http://www.mozilla.org/xbl"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    xmlns:xbl="http://www.mozilla.org/xbl">


    <binding id="x509certnsextnbaseBinding"
	extends="chrome://keymanager/content/ExtnXBL/certextn.xml#certextnbaseBinding"
        >
    	<!-- content, property, method and event descriptions go here -->
    	<content>
	    <xul:certextn anonid="certextn.nsx509extn.nsx509extntext"
	        xbl:inherits="flex,captionlabel,active,activelabel,activetooltip,activePropName,critical,criticallabel,criticaltooltip,criticalPropName,mandatory,mandatorylabel,mandatorytooltip,mandatoryPropName"
	        captionlabel=""
		mandatoryPropName=""
		activePropName=""
		criticalPropName=""
		>
		<xul:textbox anonid="certextn.nsx509extn.nsx509extntext.text"
	            xbl:inherits="certPropName=extnTextPropName,size=textsize,tooltiptext=extnvaluetooltip,type,autocompletesearch,completedefaultindex,completeselectedindex,enablehistory"
		    xflex="1"
		    xsize="32" xmaxlength="1024"
		    certPropName=""
                    onchange="document.getBindingParent(this).handleExtnValueChange(this, event)"
		    />
	    </xul:certextn>
    	</content>
	<implementation>
	    <field name="mBaseExtnElem">
		document.getAnonymousElementByAttribute(this, "anonid", "certextn.nsx509extn.nsx509extntext");
	    </field>
	    <field name="mNSExtnTextElem">
		document.getAnonymousElementByAttribute(this, "anonid", "certextn.nsx509extn.nsx509extntext.text");
	    </field>

	    <property name="active"
	        onget="return this.mBaseExtnElem.active;"
	    	onset="this.mBaseExtnElem.active = val;return val;"
		/>
	    <property name="critical"
	        onget="return this.mBaseExtnElem.critical;"
	    	onset="this.mBaseExtnElem.critical = val;return val;"
		/>
	    <property name="mandatory"
	        onget="return this.mBaseExtnElem.mandatory;"
	    	onset="this.mBaseExtnElem.mandatory = val;return val;"
		/>
	    <property name="readonly"
	        onget="return this.mBaseExtnElem.readonly;"
	    	onset="this.mBaseExtnElem.readonly = val;
		       this.mBaseExtnElem.setReadonly(this.mBaseExtnElem, val);
		       if(!val) {this.refresh();}
		       return val;"
		/>
	    <property name="disabled"
	        onget="return this.mBaseExtnElem.disabled;"
	    	onset="this.mBaseExtnElem.disabled = val;return val;"
		/>


	    <constructor>
		<![CDATA[
		// this.LogTrace("x509certnsextnbaseBinding.constructor(): this.tagName: " + this.tagName + "\n");
		if (this.getAttribute("urltype") == "true") {
		    this.setAttribute("type", "autocomplete");
		    this.setAttribute("autocompletesearch", "form-history");
		    this.setAttribute("completedefaultindex", "true");
		    this.setAttribute("completeselectedindex", "true");
		    this.setAttribute("enablehistory", "true");

		   this.setAutoCompleteSearchParam(
				this.mNSExtnTextElem,
				document.getBindingParent(this)
				);
		}
		]]>
	    </constructor>

	    <method name="refresh">
	        <body>
		<![CDATA[
		]]>
	        </body>
	    </method>

	    <method name="reset">
	        <body>
		<![CDATA[
		this.mBaseExtnElem.reset();
		this.mNSExtnTextElem.value = "";
		]]>
	        </body>
	    </method>

	    <method name="handleExtnValueChange">
		<parameter name="aExtnValueElem"/>
		<parameter name="ev"/>
		<body>
		<![CDATA[
		// this.LogTrace("logotypeinfoBinding.handleExtnValueChange():......................Start.\n");

		if (ev) {
		    ev.stopPropagation();
		}

		this.autoCompleteAction(aExtnValueElem);

		// this.LogTrace("logotypeinfoBinding.handleExtnValueChange():......................End.\n");
		]]>
		</body>
	    </method>

	    <method name="setAutoCompleteSearchParam">
		<parameter name="aTargetElem"/>
		<parameter name="aBindingParent"/>
	        <body>
		<![CDATA[
		/*
		dump("setAutoCompleteSearchParam(): this.localName: " + this.localName + " " +
					"aBindingParentTag: " + aBindingParent.localName +
					"\n");
		*/

		/*
		 * Our goal is to derive a unique name for the aTargetElem. 
		 * I do not like the scheme currently implemeted.
		 * Hopefully, I will come up with a better scheme. 
		 */

		// If the autoCompleteSearchParam attribute is specieifed, then use it.
		var autoCompleteSearchParam = aTargetElem.getAttribute("autocompletesearchparam");
		if (autoCompleteSearchParam) {
		    return;
		}

		// If the autoCompleteSearchParam attribute is not specified but this element 
		// has an id, then use that id as autoCompleteSearchParam attribute.
		if (this.id) {
		    autoCompleteSearchParam = this.id;
		    aTargetElem.setAttribute("autocompletesearchparam", autoCompleteSearchParam);
		    return;
		}
		// Otherwise, if the binding parent has an id, then use that id and the tag name 
		// of this elements.
		if (aBindingParent && aBindingParent.id) {
		    autoCompleteSearchParam = aBindingParent.id;
		    autoCompleteSearchParam += "." + this.localName;
		    aTargetElem.setAttribute("autocompletesearchparam", autoCompleteSearchParam);
		    return;
		}

		// Otherwise, if the aBindingParent exists, use its tag name as 
		// prefix for autoCompleteSearchParam. Otherwise, use the "keymgr" 
		// as prefix. Finally, append the tag name of this element and the 
		// anonid of the target element to the prefix.
		if (aBindingParent) {
		    autoCompleteSearchParam = aBindingParent.localName;
		}
		else {
		    autoCompleteSearchParam = "keymgr";
		}
		autoCompleteSearchParam += "." + this.localName;
		autoCompleteSearchParam += "." + aTargetElem.getAttribute("anonid");

		aTargetElem.setAttribute("autocompletesearchparam", autoCompleteSearchParam);

		]]>
	        </body>
	    </method>
	    <method name="toCertProps">
		<parameter name="aCertProps"/>
	        <body>
		<![CDATA[
		// this.LogTrace("x509certnsextnbaseBinding.toCertProps():...................Start.\n");

		if (!this.active) {
		    return;
		}
		if (this.mBaseExtnElem.toCertProps) {
		    this.mBaseExtnElem.toCertProps(aCertProps);
		}
		this.mBaseExtnElem.certExtnToProps(this.mBaseExtnElem, aCertProps);

		// this.LogTrace("x509certnsextnbaseBinding.toCertProps():...................End.\n");
		]]>
	        </body>
	    </method>
	    <method name="updateCertProps">
		<parameter name="aCertProps"/>
	        <body>
		<![CDATA[
		// this.LogTrace("x509certnsextnbaseBinding.updateCertProps():...................Start.\n");
		if (! this.containsAnyProperty(this.mBaseExtnElem, aCertProps)) {
		    // this.LogDebug("x509certnsextnbaseBinding.updateCertProps(): Found no properties for this extension: " + this.tagName + "\n");
		    return;
		}

		this.reset();

		this.mBaseExtnElem.updateCertExtnProps(this.mBaseExtnElem, aCertProps);
		this.refresh();

		// this.LogTrace("x509certnsextnbaseBinding.updateCertProps():...................End.\n");
		]]>
	        </body>
	    </method>
	    <method name="mergeCertProps">
		<parameter name="aCertProps"/>
	        <body>
		<![CDATA[
		// this.LogTrace("x509certnsextnbaseBinding.mergeCertProps():...................Start.\n");
		if (! this.containsAnyProperty(this.mBaseExtnElem, aCertProps)) {
		    // this.LogDebug("x509certnsextnbaseBinding.mergeCertProps(): Found no properties for this extension: " + this.tagName + "\n");
		    return;
		}

		this.mBaseExtnElem.updateCertExtnProps(this.mBaseExtnElem, aCertProps, true);
		this.refresh();

		// this.LogTrace("x509certnsextnbaseBinding.mergeCertProps():...................End.\n");
		]]>
	        </body>
	    </method>

	</implementation>
    </binding>

    <binding id="nsbaseurlBinding"
        extends="#x509certnsextnbaseBinding"
    	>
	<implementation>
	</implementation>
    </binding>

    <binding id="nsrevocationurlBinding"
        extends="#x509certnsextnbaseBinding"
	>
	<implementation>
	</implementation>
    </binding>

    <binding id="nscarevocationurlBinding"
        extends="#x509certnsextnbaseBinding"
		>
	<implementation>
	</implementation>
    </binding>

    <binding id="nscertrenewalurlBinding"
        extends="#x509certnsextnbaseBinding"
	>
	<implementation>
	</implementation>
    </binding>

    <binding id="nscapolicyurlBinding"
        extends="#x509certnsextnbaseBinding"
		>
	<implementation>
	</implementation>
    </binding>

    <binding id="nssslservernameBinding"
        extends="#x509certnsextnbaseBinding"
		>
	<implementation>
	</implementation>
    </binding>

    <binding id="nscommentBinding"
        extends="#x509certnsextnbaseBinding"
		>
	<implementation>
	</implementation>
    </binding>

</bindings>


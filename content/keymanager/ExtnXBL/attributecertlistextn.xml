<?xml version="1.0"?>
<!-- @(#) $Id: attributecertlistextn.xml,v 1.10 2009/12/02 07:09:50 subrata Exp $ -->

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Avaya Labs Research, Avaya Inc. Code.
   -
   - The Initial Developer of the Original Code is
   - Subrata Mazumdar, Avaya Labs Research, Avaya Inc.
   - Portions created by the Initial Developer are Copyright (C) 2007.
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   Subrata Mazumdar (mazum@avaya.com)
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->


<!DOCTYPE bindings SYSTEM "chrome://keymanager/locale/keyManager.dtd">

<bindings id="attributecertlistextnBindings"
    xmlns="http://www.mozilla.org/xbl"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    xmlns:xbl="http://www.mozilla.org/xbl">


    <binding id="vomsattrcertlistextnBinding"
	extends="chrome://keymanager/content/ExtnXBL/certextn.xml#certextnbaseBinding"
        >
        <resources>
	    <stylesheet src="chrome://keymanager/skin/kmbindings.css"/>
        </resources>

    	<!-- content, property, method and event descriptions go here -->
    	<content>
	    <xul:certextn anonid="certextn.attributecertlist.voms"
	        xbl:inherits="flex,captionlabel,active,activelabel,activetooltip,activePropName,critical,criticallabel,criticaltooltip,criticalPropName,mandatory,mandatorylabel,mandatorytooltip,mandatoryPropName,disabled,readonly"
		captionlabel = "VOMS Attribute Cert List"
		activePropName = "vomsAttrCertList"
		criticalPropName = "vomsAttrCertList-crit"
		mandatoryPropName = "vomsAttrCertList-mandatory"
		>
		<xul:vbox>
		    <xul:hbox>
		        <xul:fileselector anonid="certextn.attributecertlist.voms.file"
			    xbl:inherits="filetooltiptext=attrcertpathtooltip,browsetooltiptext=attrcertpathbrowsetooltip,value=attrcertpathfilepath,attrcertFileFormatPropName,attrcertFilePathPropName,formathidden=attrcertformathidden,formatlabel=attrcertformatlabel,filetooltiptext=attrcertfiletooltiptext,browsetooltiptext=attrcertbrowsetooltiptext,fileTypeMsg=attcertfileTypeMsg,fileDialogMsg=attrcertfileDialogMsg,fileTypeFilters=attrcertfileTypeFilters"
			    ascii="true"
  	  		    autocompletesearchparam="keymgr.certextn.attributecertlist.voms.file"
  			    formatlabel="Base64"
  			    formattooltiptext="Select this option if the attribute cert file is in base 64 format."
			    formathidden="false"
			    fileMode="open"
			    fileDialogMsg="Choose Attribute Certificate File"
			    fileTypeMsg="Attribute Cert File"
			    fileTypeFilters="*.acr"
  			    filetooltiptext="Enter the path to the Attribute Certificate List File."
			    browselabel="Browse"
			    browsetooltiptext="Click this button to select the path to the Attribute Certificate List File."
			    attrcertFileFormatPropName = "vomsAttrCertList-file-format-ascii"
			    attrcertFilePathPropName = "vomsAttrCertList-file-path"
    			    onpopuphiding="getBindingParent(this).handleVomsAttrcertFileSelection(this, event)"
    			    onchange="getBindingParent(this).handleVomsAttrcertFileSelection(this, event)"
    			    oncommand="getBindingParent(this).handleVomsAttrcertFileSelection(this, event)"
			    />
		    </xul:hbox>
		    <xul:hbox align="start">
			<xul:label value="Content Type:"/>
		        <xul:menulist anonid="certextn.attributecertlist.voms.file.type"
			    tooltiptext="Select the content type of the file from the list"
			    value="attrcert"
		    	    certPropName="vomsAttrCertList-content-type"
		  	    >
                            <xul:menupopup
			    	onpopupshowing="getBindingParent(this).handleFileTypePopupShowing(this, event);return true;"
			        >
                                <xul:menuitem anonid="certextn.attributecertlist.voms.file.type.attrcert"
			           label="Single Attribute Cert"
			           value="attrcert"
				   tooltiptext="Single Attribute Cert (will be converted to list) either in der or in base64 format."
			           />
                                <xul:menuitem anonid="certextn.attributecertlist.voms.file.type.attrcertb64seq"
			           label="List of Base64 Attribute Cert"
			           value="attrcertb64seq"
			           tooltiptext="Sequence of Base64 Attribute Certs - must be separated using BEGIN/END"
			           />
                                <xul:menuitem anonid="certextn.attributecertlist.voms.file.type.attrcertlist"
			           label="Single Attribute Cert List"
			           value="attrcertlist"
				   tooltiptext="An Attribute Cert List either in der or in base64 format."
				   />
                            </xul:menupopup>
                        </xul:menulist>
		    </xul:hbox>
		</xul:vbox>
	    </xul:certextn>
    	</content>
	<implementation>
	    <field name="mBaseExtnElem">
		document.getAnonymousElementByAttribute(this, "anonid", "certextn.attributecertlist.voms");
	    </field>
	    <field name="mAttributeCertListFilePickerElem">
		document.getAnonymousElementByAttribute(this, "anonid", "certextn.attributecertlist.voms.file");
	    </field>
	    <field name="mAttributeCertFileContentTypeElem">
		document.getAnonymousElementByAttribute(this, "anonid", "certextn.attributecertlist.voms.file.type");
	    </field>
	    <field name="mAttrcertb64seqMenuItemElem">
		document.getAnonymousElementByAttribute(this, "anonid", "certextn.attributecertlist.voms.file.type.attrcertb64seq");
	    </field>

	    <property name="active"
	        onget="return this.mBaseExtnElem.active;"
	    	onset="this.mBaseExtnElem.active = val;return val;"
		/>
	    <property name="critical"
	        onget="return this.mBaseExtnElem.critical;"
	    	onset="this.mBaseExtnElem.critical = val;return val;"
		/>
	    <property name="mandatory"
	        onget="return this.mBaseExtnElem.mandatory;"
	    	onset="this.mBaseExtnElem.mandatory = val;return val;"
		/>
	    <property name="attrcertFileFormatPropName" readonly="true"
	        onget="return this.mAttributeCertListFilePickerElem.getAttribute('attrcertFileFormatPropName');"
		/>
	    <property name="attrcertFilePathPropName" readonly="true"
	        onget="return this.mAttributeCertListFilePickerElem.getAttribute('attrcertFilePathPropName');"
		/>
	    <property name="readonly"
	        onget="return this.mBaseExtnElem.readonly;"
	    	onset="this.mBaseExtnElem.readonly = val;
		       this.mBaseExtnElem.setReadonly(this.mBaseExtnElem, val);
		       if(!val) {this.refresh();}
		       return val;"
		/>
	    <property name="disabled"
	        onget="return this.mBaseExtnElem.disabled;"
	    	onset="this.mBaseExtnElem.disabled = val;return val;"
		/>

	    <constructor>
		<![CDATA[
		// this.LogDebug("vomsattrcertlistextnBinding.constructor(): this.tagName: " + this.tagName + "\n");
		// this.mAttributeCertListFilePickerElem.addEventListener('command', this.handleVomsAttrcertFileSelectionEv, false);
		// this.mAttributeCertListFilePickerElem.addEventListener('change', this.handleVomsAttrcertFileSelectionEv, false);
		]]>
	    </constructor>

	    <method name="refresh">
	        <body>
		<![CDATA[
		]]>
	        </body>
	    </method>

	    <method name="reset">
	        <body>
		<![CDATA[
		this.mBaseExtnElem.reset();
		this.mAttributeCertListFilePickerElem.value = "";
		]]>
	        </body>
	    </method>

	    <method name="handleVomsAttrcertFileSelection">
		<parameter name="aAttrcertListFilePickerElem"/>
		<parameter name="ev"/>
		<body>
		<![CDATA[
                // this.LogTrace("vomsattrcertlistextnBinding.handleVomsAttrcertFileSelection():................Start.\n");

                var attrCertListFile = aAttrcertListFilePickerElem.file;
                var fileBase64 = aAttrcertListFilePickerElem.ascii;

                if (attrCertListFile == null) {
    	            alert("Error: Not a valid file path - please type/select another path.\n");
		    // aAttrcertListFilePickerElem.filepath = "";
    	            return;
                }
                if (attrCertListFile.fileSize == 0) {
    	            alert("Error: selected file is zero length - please select another file.\n");
		    // aAttrcertListFilePickerElem.filepath = "";
    	            return;
                }
		this.handleFileTypePopupShowing();


                // this.LogTrace("vomsattrcertlistextnBinding.handleVomsAttrcertFileSelection():................End.\n");
		]]>
		</body>
	    </method>

	    <method name="handleVomsAttrcertFileSelectionEv">
		<parameter name="ev"/>
	        <body>
		<![CDATA[
		this.handleVomsAttrcertFileSelection(ev.target, ev);
		]]>
		</body>
	    </method>

	    <method name="handleFileTypePopupShowing">
		<parameter name="aFileTypeMenuListElem"/>
	        <body>
		<![CDATA[
                // this.LogTrace("vomsattrcertlistextnBinding.handleFileTypePopupShowing():................Start.\n");

                var fileBase64 = this.mAttributeCertListFilePickerElem.ascii;
                // this.LogDebug("vomsattrcertlistextnBinding.handleFileTypePopupShowing(): fileBase64: " + fileBase64 + "\n");

		if (fileBase64) {
		    this.mAttrcertb64seqMenuItemElem.hidden = false;
		}
		else {
                    // this.LogDebug("vomsattrcertlistextnBinding.handleFileTypePopupShowing(): mAttributeCertFileContentTypeElem.value: " + this.mAttributeCertFileContentTypeElem.value + "\n");
		    if ("attrcertb64seq" == this.mAttributeCertFileContentTypeElem.value) {
		    	this.mAttributeCertFileContentTypeElem.value = "attrcert";
		    }
		    this.mAttrcertb64seqMenuItemElem.hidden = true;
		}
                // this.LogTrace("vomsattrcertlistextnBinding.handleFileTypePopupShowing():................End.\n");
		return true;
		]]>
		</body>
	    </method>


	    <method name="toCertProps">
		<parameter name="aCertProps"/>
	        <body>
		<![CDATA[
		this.LogTrace("vomsattrcertlistextnBinding.toCertProps():...................Start.\n");

		if (!this.active) {
		    return;
		}
		if ((this.mAttributeCertListFilePickerElem.filepath == "") || !this.mAttributeCertListFilePickerElem.file) {
		    return;
		}

		if (this.mBaseExtnElem.toCertProps) {
		    this.mBaseExtnElem.toCertProps(aCertProps);
		}

		var propKey = null;
		var propVal = null;
		
		propKey = this.attrcertFilePathPropName;
		aCertProps.setStringProperty(propKey, this.mAttributeCertListFilePickerElem.filepath);
		if (this.mAttributeCertListFilePickerElem.ascii) {
		    propKey = this.attrcertFileFormatPropName;
		    aCertProps.setStringProperty(propKey, "true");
		}

		propKey = "vomsAttrCertList-content-type";
		aCertProps.setStringProperty(propKey, this.mAttributeCertFileContentTypeElem.value);

		// this.dumpProperties(aCertProps, "vomsattrcertlistextnBinding.aCertProps");

		this.LogTrace("vomsattrcertlistextnBinding.toCertProps():...................End.\n");
		]]>
	        </body>
	    </method>

	    <method name="updateAttrCertFilePath">
		<parameter name="aCertProps"/>
	        <body>
		<![CDATA[
                var propKey;
                var propValue = null;
		try {
		    propKey = this.attrcertFilePathPropName;
		    propValue = aCertProps.getStringProperty(propKey);
		} catch (ex) {propValue = null;}
		if (!propValue) {
		    return;
		}
		this.mAttributeCertListFilePickerElem.filepath = propValue;
		if (!this.mAttributeCertListFilePickerElem.file) {
		    return;
		}

		try {
		    propKey = this.attrcertFileFormatPropName;
		    propValue = aCertProps.getStringProperty(propKey);
		} catch (ex) {propValue = null;}
		if (propValue && (propValue == "true")) {
		    this.mAttributeCertListFilePickerElem.ascii = true;
		}

		]]>
	        </body>
	    </method>

	    <method name="updateCertProps">
		<parameter name="aCertProps"/>
	        <body>
		<![CDATA[
		// this.LogTrace("vomsattrcertlistextnBinding.updateCertProps():...................Start.\n");
		if (! this.containsAnyProperty(this.mBaseExtnElem, aCertProps)) {
		    // this.LogDebug("vomsattrcertlistextnBinding.updateCertProps(): Found no properties for this extension: " + this.tagName + "\n");
		    return;
		}

		this.reset();

		this.updateAttrCertFilePath(aCertProps);

		// Attribute cert path must point to valid file,
		// otherwise ignore the extension.
		if (this.mAttributeCertListFilePickerElem.file) {
		     this.mBaseExtnElem.updateCertExtnProps(this.mBaseExtnElem, aCertProps);
		}

		this.refresh();

		// this.LogTrace("vomsattrcertlistextnBinding.updateCertProps():...................End.\n");
		]]>
	        </body>
	    </method>

	    <method name="mergeCertProps">
		<parameter name="aCertProps"/>
	        <body>
		<![CDATA[
		// this.LogTrace("vomsattrcertlistextnBinding.mergeCertProps():...................Start.\n");
		if (! this.containsAnyProperty(this.mBaseExtnElem, aCertProps)) {
		    // this.LogDebug("vomsattrcertlistextnBinding.mergeCertProps(): Found no properties for this extension: " + this.tagName + "\n");
		    return;
		}

		this.updateAttrCertFilePath(aCertProps);

		// Attribute cert path must point to valid file,
		// otherwise ignore the extension.
		if (this.mAttributeCertListFilePickerElem.file) {
		     this.mBaseExtnElem.updateCertExtnProps(this.mBaseExtnElem, aCertProps);
		}

		this.refresh();

		// this.LogTrace("vomsattrcertlistextnBinding.mergeCertProps():...................End.\n");
		]]>
	        </body>
	    </method>

	</implementation>
    </binding>

    <binding id="globusamlassertionextnBinding"
	extends="chrome://keymanager/content/ExtnXBL/certextn.xml#certextnbaseBinding"
        >
        <resources>
	    <stylesheet src="chrome://keymanager/skin/kmbindings.css"/>
        </resources>

    	<!-- content, property, method and event descriptions go here -->
    	<content>
	    <xul:certextn anonid="certextn.attributecertlist.saml.assertion"
	        xbl:inherits="flex,captionlabel,active,activelabel,activetooltip,activePropName,critical,criticallabel,criticaltooltip,criticalPropName,mandatory,mandatorylabel,mandatorytooltip,mandatoryPropName"
		captionlabel = "Globus SAML Assertion"
		activePropName = "globusSAMLAssertion"
		criticalPropName = "globusSAMLAssertion-crit"
		mandatoryPropName = "globusSAMLAssertion-mandatory"
		>
		<xul:vbox>
		    <xul:hbox>
		        <xul:fileselector anonid="certextn.attributecertlist.saml.assertion.file"
			    xbl:inherits="filetooltiptext=attrcertpathtooltip,browsetooltiptext=attrcertpathbrowsetooltip,value=attrcertpathfilepath,attrcertFileFormatPropName,attrcertFilePathPropName,formathidden=attrcertformathidden,formatlabel=attrcertformatlabel,filetooltiptext=attrcertfiletooltiptext,browsetooltiptext=attrcertbrowsetooltiptext,fileTypeMsg=attcertfileTypeMsg,fileDialogMsg=attrcertfileDialogMsg,fileTypeFilters=attrcertfileTypeFilters"
			    ascii="true"
  	  		    autocompletesearchparam="keymgr.certextn.attributecertlist.saml.assertion.file"
  			    formatlabel="XML"
			    formathidden="true"
			    fileMode="open"
			    fileDialogMsg="Choose SAML Assertion XML File"
			    fileTypeMsg="SAML Assertion XML File"
			    fileTypeFilters="*.xml"
  			    filetooltiptext="Enter the path to the SAML Assertion XML file."
			    browselabel="Browse"
			    browsetooltiptext="Click this button to select the path to the SAML Assertion XML file."

			    attrcertFileFormatPropName = "globusSAMLAssertion-file-format-ascii"
			    attrcertFilePathPropName = "globusSAMLAssertion-file-path"
    			    onpopuphiding="getBindingParent(this).handleSamlAssertionFileSelection(this, event)"
    			    onchange="getBindingParent(this).handleSamlAssertionFileSelection(this, event)"
    			    oncommand="getBindingParent(this).handleSamlAssertionFileSelection(this, event)"
			    />
		    </xul:hbox>
		    <xul:hbox align="start">
			<xul:label value="Encoding Type:"/>
		        <xul:menulist anonid="certextn.attributecertlist.saml.assertion.encoding.type"
			    tooltiptext="Select the XML file encoding type from the list"
			    value="utf8string"
		    	    certPropName="globusSAMLAssertion-encoding-type"
		  	    >
                            <xul:menupopup>
                                <xul:menuitem anonid="certextn.attributecertlist.saml.assertion.encoding.type.utf8string"
			           label="UTF8 String"
			           value="utf8string"
			           />
                                <xul:menuitem anonid="certextn.attributecertlist.saml.assertion.encoding.type.visiblestring"
			           label="Visible String"
			           value="visiblestring"
			           />
                                <xul:menuitem anonid="certextn.attributecertlist.saml.assertion.encoding.type.printablestring"
			           label="Printable String"
			           value="printablestring"
			           />
                                <xul:menuitem anonid="certextn.attributecertlist.saml.assertion.encoding.type.ia5string"
			           label="IA5 String"
			           value="ia5string"
			           />
                                <xul:menuitem anonid="certextn.attributecertlist.saml.assertion.encoding.type.octetstring"
			           label="Octet String"
			           value="octetstring"
			           />
                            </xul:menupopup>
                        </xul:menulist>
		    </xul:hbox>
		</xul:vbox>
	    </xul:certextn>
    	</content>
	<implementation>
	    <field name="mBaseExtnElem">
		document.getAnonymousElementByAttribute(this, "anonid", "certextn.attributecertlist.saml.assertion");
	    </field>
	    <field name="mSamlAssertionFilePickerElem">
		document.getAnonymousElementByAttribute(this, "anonid", "certextn.attributecertlist.saml.assertion.file");
	    </field>
	    <field name="mSamlAssertionEncodingTypeElem">
		document.getAnonymousElementByAttribute(this, "anonid", "certextn.attributecertlist.saml.assertion.encoding.type");
	    </field>

	    <property name="active"
	        onget="return this.mBaseExtnElem.active;"
	    	onset="this.mBaseExtnElem.active = val;return val;"
		/>
	    <property name="critical"
	        onget="return this.mBaseExtnElem.critical;"
	    	onset="this.mBaseExtnElem.critical = val;return val;"
		/>
	    <property name="mandatory"
	        onget="return this.mBaseExtnElem.mandatory;"
	    	onset="this.mBaseExtnElem.mandatory = val;return val;"
		/>
	    <property name="attrcertFileFormatPropName" readonly="true"
	        onget="return this.mSamlAssertionFilePickerElem.getAttribute('attrcertFileFormatPropName');"
		/>
	    <property name="attrcertFilePathPropName" readonly="true"
	        onget="return this.mSamlAssertionFilePickerElem.getAttribute('attrcertFilePathPropName');"
		/>
	    <property name="readonly"
	        onget="return this.mBaseExtnElem.readonly;"
	    	onset="this.mBaseExtnElem.readonly = val;
		       this.mBaseExtnElem.setReadonly(this.mBaseExtnElem, val);
		       if(!val) {this.refresh();}
		       return val;"
		/>
	    <property name="disabled"
	        onget="return this.mBaseExtnElem.disabled;"
	    	onset="this.mBaseExtnElem.disabled = val;return val;"
		/>

	    <constructor>
		<![CDATA[
		// this.LogDebug("globusamlassertionextnBinding.constructor(): this.tagName: " + this.tagName + "\n");
		]]>
	    </constructor>

	    <method name="refresh">
	        <body>
		<![CDATA[
		]]>
	        </body>
	    </method>

	    <method name="reset">
	        <body>
		<![CDATA[
		this.mBaseExtnElem.reset();
		this.mSamlAssertionFilePickerElem.value = "";
		]]>
	        </body>
	    </method>

	    <method name="handleSamlAssertionFileSelection">
		<parameter name="aSamlAssertionFilePickerElem"/>
		<parameter name="ev"/>
		<body>
		<![CDATA[
                // this.LogTrace("globusamlassertionextnBinding.handleSamlAssertionFileSelection():................Start.\n");

                var samlAssertionFile = aSamlAssertionFilePickerElem.file;

                if (samlAssertionFile == null) {
    	            alert("Error: Not a valid file path - please type/select another path.\n");
		    // aSamlAssertionFilePickerElem.filepath = "";
    	            return;
                }
                if (samlAssertionFile.fileSize == 0) {
    	            alert("Error : selected file is zero length - please select another file.\n");
		    // aSamlAssertionFilePickerElem.filepath = "";
    	            return;
                }

                // this.LogTrace("globusamlassertionextnBinding.handleSamlAssertionFileSelection():................End.\n");
		]]>
		</body>
	    </method>


	    <method name="toCertProps">
		<parameter name="aCertProps"/>
	        <body>
		<![CDATA[
		// this.LogTrace("globusamlassertionextnBinding.toCertProps():...................Start.\n");

		if (!this.active) {
		    return;
		}
		if ((this.mSamlAssertionFilePickerElem.filepath == "") || !this.mSamlAssertionFilePickerElem.file) {
		    return;
		}

		if (this.mBaseExtnElem.toCertProps) {
		    this.mBaseExtnElem.toCertProps(aCertProps);
		}

		var propKey = null;
		var propVal = null;
		
		propKey = this.attrcertFilePathPropName;
		aCertProps.setStringProperty(propKey, this.mSamlAssertionFilePickerElem.filepath);
		if (this.mSamlAssertionFilePickerElem.ascii) {
		    propKey = this.attrcertFileFormatPropName;
		    aCertProps.setStringProperty(propKey, "true");
		    /*
		    if (propKey) {
		    }
		    */
		}
		propKey = "globusSAMLAssertion-encoding-type";
		aCertProps.setStringProperty(propKey, this.mSamlAssertionEncodingTypeElem.value);

		// this.LogTrace("globusamlassertionextnBinding.toCertProps():...................End.\n");
		]]>
	        </body>
	    </method>

	    <method name="updateAttrCertFilePath">
		<parameter name="aCertProps"/>
	        <body>
		<![CDATA[
                var propKey;
                var propValue = null;
		try {
		    propKey = this.attrcertFilePathPropName;
		    propValue = aCertProps.getStringProperty(propKey);
		} catch (ex) {propValue = null;}
		if (!propValue) {
		    return;
		}
		this.mSamlAssertionFilePickerElem.filepath = propValue;
		if (!this.mSamlAssertionFilePickerElem.file) {
		    return;
		}

		try {
		    propKey = this.attrcertFileFormatPropName;
		    propValue = aCertProps.getStringProperty(propKey);
		} catch (ex) {propValue = null;}
		if (propValue && (propValue == "true")) {
		    this.mSamlAssertionFilePickerElem.ascii = true;
		}

		]]>
	        </body>
	    </method>

	    <method name="updateCertProps">
		<parameter name="aCertProps"/>
	        <body>
		<![CDATA[
		// this.LogTrace("globusamlassertionextnBinding.updateCertProps():...................Start.\n");
		if (! this.containsAnyProperty(this.mBaseExtnElem, aCertProps)) {
		    // this.LogDebug("globusamlassertionextnBinding.updateCertProps(): Found no properties for this extension: " + this.tagName + "\n");
		    return;
		}

		this.reset();

		this.updateAttrCertFilePath(aCertProps);

		// Attribute cert path must point to valid file,
		// otherwise ignore the extension.
		if (this.mSamlAssertionFilePickerElem.file) {
		     this.mBaseExtnElem.updateCertExtnProps(this.mBaseExtnElem, aCertProps);
		}

		this.refresh();

		// this.LogTrace("globusamlassertionextnBinding.updateCertProps():...................End.\n");
		]]>
	        </body>
	    </method>

	    <method name="mergeCertProps">
		<parameter name="aCertProps"/>
	        <body>
		<![CDATA[
		// this.LogTrace("globusamlassertionextnBinding.mergeCertProps():...................Start.\n");
		if (! this.containsAnyProperty(this.mBaseExtnElem, aCertProps)) {
		    // this.LogDebug("globusamlassertionextnBinding.mergeCertProps(): Found no properties for this extension: " + this.tagName + "\n");
		    return;
		}

		this.updateAttrCertFilePath(aCertProps);

		// Attribute cert path must point to valid file,
		// otherwise ignore the extension.
		if (this.mSamlAssertionFilePickerElem.file) {
		     this.mBaseExtnElem.updateCertExtnProps(this.mBaseExtnElem, aCertProps);
		}

		this.refresh();

		// this.LogTrace("globusamlassertionextnBinding.mergeCertProps():...................End.\n");
		]]>
	        </body>
	    </method>

	</implementation>
    </binding>

</bindings>


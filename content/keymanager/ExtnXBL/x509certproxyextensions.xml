<?xml version="1.0"?>
<!-- @(#) $Id: x509certproxyextensions.xml,v 1.4 2009/04/20 02:07:13 subrata Exp $ -->

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Avaya Labs Research, Avaya Inc. Code.
   -
   - The Initial Developer of the Original Code is
   - Subrata Mazumdar, Avaya Labs Research, Avaya Inc.
   - Portions created by the Initial Developer are Copyright (C) 2007.
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   Subrata Mazumdar (mazum@avaya.com)
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->


<!DOCTYPE bindings SYSTEM "chrome://keymanager/locale/keyManager.dtd">

<bindings id="x509certproxyextensionsBindings"
    xmlns="http://www.mozilla.org/xbl"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    xmlns:xbl="http://www.mozilla.org/xbl">

    <binding id="x509certproxyextensionsBinding"
	extends="chrome://keymanager/content/ExtnXBL/certextn.xml#certextnbaseBinding"
	>
	<!--
	<resources>
	    <script type="application/x-javascript" src="chrome://keymanager/content/ExtnXBL/certextn2props.js"/>
	    <stylesheet src="chrome://keymanager/skin/kmbindings.css"/>
	</resources>
	-->
	    <!--
	    <xul:vbox flex="1"
		xstyle="overflow:auto; height:475px;"
		>
	    </xul:vbox>
	    -->
	<!-- content, property, method and event descriptions go here -->
	<content>
	    <xul:grid anonid="x509cert.extensions.std.grid"
		xbl:inherits="hidden"
		flex="1"
		debug="true"
		> 
		<xul:columns>
		    <xul:column flex="1"/>
		    <!--
		    <xul:column flex="1"/>
		    -->
		</xul:columns>
		<xul:rows>
		    <xul:row>
			<xul:proxycert anonid="x509cert.extensions.std.proxycert"
			    class="x509certextn"
			    xmandatory="true"
			    xactive="true"
			    xcritical="true"
			    xmaxpathlen="2"
			    xdebug="true"
			    />
		    </xul:row>
		    <xul:row>
			<xul:vomsattrcertlist anonid="x509cert.extensions.std.vomsattrcertlist"
			    class="x509certextn"
			    />
		    </xul:row>
		    <xul:row>
			<xul:globusamlassertion anonid="x509cert.extensions.std.globusamlassertion"
			    class="x509certextn"
			    />
		    </xul:row>

		</xul:rows>
	    </xul:grid>
	</content>
	<implementation>
	    <field name="mCertDB">
		Components.classes["@mozilla.org/security/x509certdb;1"].getService(Components.interfaces.nsIX509CertDB);
	    </field>
	    <field name="mKeyManager">
		/* alrIKeyManager */
		Components.classes["@avaya.com/pkm/keymanager;1"].
			getService(Components.interfaces.alrIKeyManager);
	    </field>
	    <field name="mProxyExtensionsGridElem">
		document.getAnonymousElementByAttribute(this, "anonid", "x509cert.extensions.std.grid");
	    </field>

	    <field name="mReadonly">
	    false
	    </field>

	    <field name="mX509Cert">
	    </field>

	    <property name="x509Cert"
		onget="return this.mCert;"
		onset="this.mCert = val; return val;"
		/>

	    <property name="readonly">
		<getter>
		<![CDATA[
		return this.mReadonly;
		]]>
		</getter>
		<setter>
		<![CDATA[
		this.mReadonly = val;
		var /* NodeList */ certExtnNodeList = this.mProxyExtensionsGridElem.getElementsByAttribute("class", "x509certextn");
		for (var i = 0; i < certExtnNodeList.length; i++) {
		    var certExtnElem = certExtnNodeList.item(i);
		    certExtnElem.readonly = val;
		}
		]]>
		</setter>
	    </property>


	    <constructor>
		<![CDATA[
		// this.mMaxLogLevel = 9;
		this.LogTrace("x509certproxyextensionsBinding.constructor():......................Start.");

		this.refresh();

		this.LogTrace("x509certproxyextensionsBinding.constructor():......................End.");
		]]>
	    </constructor>

	    <method name="refresh">
		<body>
		<![CDATA[
		var /* NodeList */ certExtnNodeList = this.mProxyExtensionsGridElem.getElementsByAttribute("class", "x509certextn");
		for (var i = 0; i < certExtnNodeList.length; i++) {
		    var certExtnElem = certExtnNodeList.item(i);
		    // this.LogDebug("x509certproxyextensionsBinding.refresh(): i : " + i + " extnId: " + certExtnElem.tagName);
		    if (certExtnElem.refresh) {
			certExtnElem.refresh();
		    }
		}
		]]>
		</body>
	    </method>

	    <method name="reset">
		<body>
		<![CDATA[
		var /* NodeList */ certExtnNodeList = this.mProxyExtensionsGridElem.getElementsByAttribute("class", "x509certextn");
		for (var i = 0; i < certExtnNodeList.length; i++) {
		    var certExtnElem = certExtnNodeList.item(i);
		    certExtnElem.reset();
		}
		]]>
		</body>
	    </method>

	    <method name="mergeCertProps">
		<parameter name="aCertProps"/>
		<parameter name="aCert"/>
		<body>
		<![CDATA[
		var /* NodeList */ certExtnNodeList = this.mProxyExtensionsGridElem.getElementsByAttribute("class", "x509certextn");
		for (var i = 0; i < certExtnNodeList.length; i++) {
		    var certExtnElem = certExtnNodeList.item(i);
		    certExtnElem.mergeCertProps(aCertProps);
		}

		this.mX509Cert = null;
		if (aCert) {
		    this.mX509Cert = aCert;
		}
		]]>
		</body>
	    </method>

	    <method name="mergeCertPropsByExtensionTag">
		<parameter name="aExtnTagName"/>
		<parameter name="aCertProps"/>
		<body>
		<![CDATA[
		var /* NodeList */ certExtnNodeList = this.mProxyExtensionsGridElem.getElementsByTagName(aExtnTagName);
		if (certExtnNodeList.length <= 0) {
		    if (aExtnTagName.indexOf("xul:") < 0) {
		    	var tagName = "xul:" + aExtnTagName;
		        certExtnNodeList = this.mProxyExtensionsGridElem.getElementsByTagName(tagName);
		    }
		}
		for (var i = 0; i < certExtnNodeList.length; i++) {
		    var certExtnElem = certExtnNodeList.item(i);
		    certExtnElem.mergeCertProps(aCertProps);
		    break;
		}
		]]>
		</body>
	    </method>

	    <method name="mergeCertPropsByExtensionTagList">
		<parameter name="aExtnTagNameList"/>
		<parameter name="aCertProps"/>
		<body>
		<![CDATA[
		for (var j = 0; j < aExtnTagNameList.length; j++) {
		    var extnTagName = aExtnTagNameList[j];
		    this.mergeCertPropsByExtensionTag(extnTagName, aCertProps);
		}
		]]>
		</body>
	    </method>


	    <method name="updateCertProps">
		<parameter name="aCertProps"/>
		<parameter name="aCert"/>
		<body>
		<![CDATA[
		this.LogTrace("x509certproxyextensionsBinding.updateCertProps():......................Start.");
		// this.dumpProperties(aCertProps, "x509certproxyextensionsBinding.updateCertProps(): aCertProps: ");

		var /* NodeList */ certExtnNodeList = this.mProxyExtensionsGridElem.getElementsByAttribute("class", "x509certextn");
		for (var i = 0; i < certExtnNodeList.length; i++) {
		    var certExtnElem = certExtnNodeList.item(i);
		    // this.LogDebug("x509certproxyextensionsBinding.updateCertProps(): i : " + i + " extnId: " + certExtnElem.tagName);
		    certExtnElem.updateCertProps(aCertProps);
		}

		this.mX509Cert = null;
		if (aCert) {
		    this.mX509Cert = aCert;
		}
		this.LogTrace("x509certproxyextensionsBinding.updateCertProps():......................End.");
		]]>
		</body>
	    </method>

	    <method name="updateCertPropsByExtensionTag">
		<parameter name="aExtnTagName"/>
		<parameter name="aCertProps"/>
		<body>
		<![CDATA[
		var /* NodeList */ certExtnNodeList = this.mProxyExtensionsGridElem.getElementsByTagName(aExtnTagName);
		if (certExtnNodeList.length <= 0) {
		    if (aExtnTagName.indexOf("xul:") < 0) {
		    	var tagName = "xul:" + aExtnTagName;
		        certExtnNodeList = this.mProxyExtensionsGridElem.getElementsByTagName(tagName);
		    }
		}
		for (var i = 0; i < certExtnNodeList.length; i++) {
		    var certExtnElem = certExtnNodeList.item(i);
		    certExtnElem.updateCertProps(aCertProps);
		    break;
		}
		]]>
		</body>
	    </method>

	    <method name="updateCertPropsByExtensionTagList">
		<parameter name="aExtnTagNameList"/>
		<parameter name="aCertProps"/>
		<body>
		<![CDATA[
		for (var j = 0; j < aExtnTagNameList.length; j++) {
		    var extnTagName = aExtnTagNameList[j];
		    this.updateCertPropsByExtensionTag(extnTagName, aCertProps);
		}
		]]>
		</body>
	    </method>


	    <method name="updateCert">
		<parameter name="aCert"/>
		<body>
		<![CDATA[
		if (!aCert) {
		    return;
		}
		var certProps = this.mKeyManager.exportCertToPropertiesByX509Cert(aCert);
		if (!certProps) {
		    return;
		}
		this.updateCertProps(certProps, aCert);
		]]>
		</body>
	    </method>

	    <method name="updateCertByExtensionTag">
		<parameter name="aExtnTagName"/>
		<parameter name="aCert"/>
		<body>
		<![CDATA[
		if (!aCert) {
		    return;
		}
		var certProps = Components.classes["@mozilla.org/persistent-properties;1"].
					createInstance(Components.interfaces.nsIPersistentProperties);
		var extensionName = aExtnTagName;
		this.mKeyManager.exportX509v3CertExtnToProperties(aCert, extensionName, certProps);
		this.updateCertPropsByExtensionTag(aExtnTagName, certProps);
		]]>
		</body>
	    </method>

	    <method name="updateCertByExtensionTagList">
		<parameter name="aExtnTagNameList"/>
		<parameter name="aCert"/>
		<body>
		<![CDATA[
		if (!aCert) {
		    return;
		}
		var certProps = this.mKeyManager.exportCertToPropertiesByX509Cert(aCert);
		if (!certProps) {
		    return;
		}
		this.updateCertPropsByExtensionTagList(aExtnTagNameList, certProps);
		]]>
		</body>
	    </method>

	    <method name="updateWithPKCS10CSR">
		<parameter name="aPkcs10Csr"/>
		<body>
		<![CDATA[
		if (!aPkcs10Csr) {
		    return;
		}
		var certProps = this.mKeyManager.exportCSRToPropertiesByPKCS10(aPkcs10Csr);
		if (!certProps) {
		    return;
		}
		this.updateCertProps(certProps, aCert);
		]]>
		</body>
	    </method>

	    <method name="toCertProps">
		<parameter name="aCertProps"/>
		<body>
		<![CDATA[
		var /* NodeList */ certExtnNodeList = this.mProxyExtensionsGridElem.getElementsByAttribute("class", "x509certextn");
		for (var i = 0; i < certExtnNodeList.length; i++) {
		    var certExtnElem = certExtnNodeList.item(i);
		    certExtnElem.toCertProps(aCertProps);
		}
		// this.dumpProperties(aCertProps, "X509CertStdExtenions");
		]]>
		</body>
	    </method>

	    <method name="toCertPropsByExtensionTag">
		<parameter name="aExtnTagName"/>
		<parameter name="aCertProps"/>
		<body>
		<![CDATA[
		var /* NodeList */ certExtnNodeList = this.mProxyExtensionsGridElem.getElementsByTagName(aExtnTagName);
		if (certExtnNodeList.length <= 0) {
		    if (aExtnTagName.indexOf("xul:") < 0) {
		    	var tagName = "xul:" + aExtnTagName;
		        certExtnNodeList = this.mProxyExtensionsGridElem.getElementsByTagName(tagName);
		    }
		}
		for (var i = 0; i < certExtnNodeList.length; i++) {
		    var certExtnElem = certExtnNodeList.item(i);
		    certExtnElem.toCertProps(aCertProps);
		    break;
		}
		]]>
		</body>
	    </method>

	    <method name="toCertPropsByExtensionTagList">
		<parameter name="aExtnTagNameList"/>
		<parameter name="aCertProps"/>
		<body>
		<![CDATA[
		for (var j = 0; j < aExtnTagNameList.length; j++) {
		    var extnTagName = aExtnTagNameList[j];
		    this.toCertPropsByExtensionTag(extnTagName, aCertProps);
		}
		]]>
		</body>
	    </method>

	    <method name="activateTaggedItemList">
		<parameter name="aTagNameListStr"/>
		<parameter name="aStatusFlag"/>
		<body>
		<![CDATA[
		if (!aTagNameListStr) {
		    return;
		}
		var tagNameList = aTagNameListStr.split(",");
		if (tagNameList.length <= 0) {
		    return;
		}
		for (var i = 0; i < tagNameList.length; i++) {
		    // var nsTagName = "xul:" + tagNameList[i];
		    var nsTagName = this.trim(tagNameList[i]);
		    this.activateCertItem(nsTagName, aStatusFlag); 
		}
		]]>
		</body>
	    </method>


	    <method name="activateCertItem">
		<parameter name="aExtnTagName"/>
		<parameter name="aStatusFlag"/>
		<body>
		<![CDATA[
		this.LogTrace("x509certproxyextensionsBinding.activateCertItem(" + aExtnTagName + "," + aStatusFlag + "):......................Start.");
		var /* NodeList */ certExtnNodeList = this.mProxyExtensionsGridElem.getElementsByTagName(aExtnTagName);
		if (certExtnNodeList.length <= 0) {
		    if (aExtnTagName.indexOf("xul:") < 0) {
		    	var tagName = "xul:" + aExtnTagName;
		        certExtnNodeList = this.mProxyExtensionsGridElem.getElementsByTagName(tagName);
		    }
		}
		this.LogDebug("x509certproxyextensionsBinding.activateCertItem(): certExtnNodeList.length: " + certExtnNodeList.length);
		for (var i = 0; i < certExtnNodeList.length; i++) {
		    var certExtnElem = certExtnNodeList.item(i);
		    certExtnElem.readonly = !aStatusFlag;
		    this.LogDebug("x509certproxyextensionsBinding.activateCertItem(): i : " + i + " extnId: " + certExtnElem.tagName);
		    return true;
		}
		this.LogTrace("x509certproxyextensionsBinding.activateCertItem(" + aExtnTagName + "," + aStatusFlag + "):......................End.");
		return false;
		]]>
		</body>
	    </method>


	</implementation>
    </binding>

</bindings>


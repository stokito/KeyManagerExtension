<?xml version="1.0"?>
<!-- @(#) $Id: crldistrpoints.xml,v 1.6 2009/09/13 13:41:00 subrata Exp $ -->

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Avaya Labs Research, Avaya Inc. Code.
   -
   - The Initial Developer of the Original Code is
   - Subrata Mazumdar, Avaya Labs Research, Avaya Inc.
   - Portions created by the Initial Developer are Copyright (C) 2007.
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   Subrata Mazumdar (mazum@avaya.com)
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<!DOCTYPE bindings
    	[
	<!ENTITY % certManager.dtd SYSTEM "chrome://pippki/locale/certManager.dtd">
	%certManager.dtd;
	<!ENTITY % keyManager.dtd SYSTEM "chrome://keymanager/locale/keyManager.dtd">
	%keyManager.dtd;
	]>

<bindings id="crldistrpointsBindings"
    xmlns="http://www.mozilla.org/xbl"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    xmlns:xbl="http://www.mozilla.org/xbl">


    <binding id="distrpointreasonsBinding"
        >
    	<content>
            <xul:grid anonid="keymgr.stdx509ext.crldistrpoint.reasons.grid"
	        flex="1"
	    	> 
                <xul:columns>
                    <xul:column/>
                    <xul:column/>
                    <xul:column/>
                </xul:columns>
                <xul:rows>
          	    <xul:row align="center">
			    <xul:checkbox anonid="keymgr.stdx509ext.crldistrpoints.reason.unused"
				label="unused"
				value="unused"
				bitvalue="0"
				disabled="true"
			    	/>
			    <xul:checkbox anonid="keymgr.stdx509ext.crldistrpoints.reason.keyCompromise"
				label="keyCompromise"
				value="keyCompromise"
				bitvalue="1"
			    	/>
			    <xul:checkbox anonid="keymgr.stdx509ext.crldistrpoints.reason.cACompromise"
				label="cACompromise"
				value="cACompromise"
				bitvalue="2"
			    	/>
                    </xul:row>
          	    <xul:row align="center">
			    <xul:checkbox anonid="keymgr.stdx509ext.crldistrpoints.reason.affiliationChanged"
				label="affiliationChanged"
				value="affiliationChanged"
				bitvalue="3"
			    	/>
			    <xul:checkbox anonid="keymgr.stdx509ext.crldistrpoints.reason.superseded"
				label="superseded"
				value="superseded"
				bitvalue="4"
			    	/>
			    <xul:checkbox anonid="keymgr.stdx509ext.crldistrpoints.reason.cessationOfOperation"
				label="cessationOfOperation"
				value="cessationOfOperation"
				bitvalue="5"
			    	/>
                    </xul:row>
          	    <xul:row align="center">
			    <xul:checkbox anonid="keymgr.stdx509ext.crldistrpoints.reason.certificateHold"
				label="certificateHold"
				value="certificateHold"
				bitvalue="6"
			    	/>
			    <xul:checkbox anonid="keymgr.stdx509ext.crldistrpoints.reason.privilegeWithdrawn"
				label="privilegeWithdrawn"
				value="privilegeWithdrawn"
				bitvalue="7"
			    	/>
			    <xul:checkbox anonid="keymgr.stdx509ext.crldistrpoints.reason.aACompromise"
				label="aACompromise"
				value="aACompromise"
				bitvalue="8"
				disabled="true"
			    	/>
                    </xul:row>
                </xul:rows>
            </xul:grid>
    	</content>
	<implementation>
	    <field name="mReasonsGridElem">
		document.getAnonymousElementByAttribute(this, "anonid", "keymgr.stdx509ext.crldistrpoint.reasons.grid");
	    </field>
	    <property name="value">
	        <getter>
		<![CDATA[
                var /* NodeList */ selectedReasonElemList = this.mReasonsGridElem.getElementsByAttribute("checked", "true");
		if (selectedReasonElemList.length == 0) {
		    return -1;
		}
		var reasons = 0;
                for (var i = 0; i < selectedReasonElemList.length; i++) {
	            var selectedReasonElem = selectedReasonElemList.item(i);
		    var bitValue = parseInt(selectedReasonElem.getAttribute("bitvalue"));
		    var reasonVal = (0x80 >> bitValue);
		    reasons |= reasonVal;
		}
		return reasons;
		]]>
	        </getter>
	        <setter>
		<![CDATA[
		this.reset();
		if (val == "") {
		    return;
		}
		var reasons = parseInt(val);
		if (reasons < 0) {
		    return;
		}
                var /* NodeList */ reasonElemList = this.mReasonsGridElem.getElementsByAttribute("bitvalue", "*");
                for (var i = 0; i < reasonElemList.length; i++) {
	            var reasonElem = reasonElemList.item(i);
		    var bitValue = parseInt(selectedReasonElem.getAttribute("bitvalue"));
		    var reasonVal = (0x80 >> bitValue);
		    if (reasons & reasonVal) {
		    	reasonElem.checked = true;
		    }
		}
		]]>
	        </setter>
	    </property>
	    <method name="reset">
	        <body>
		<![CDATA[
                var /* NodeList */ reasonElemList = this.mReasonsGridElem.getElementsByAttribute("bitvalue", "*");
                for (var i = 0; i < reasonElemList.length; i++) {
	            var reasonElem = reasonElemList.item(i);
		    reasonElem.checked = false;
		}
		]]>
	        </body>
	    </method>
	</implementation>
    </binding>


    <binding id="crldistrpointBinding"
	extends="chrome://keymanager/content/ExtnXBL/certextn.xml#certextnbaseBinding"
        >
        <!--
        <resources>
    	    <script type="application/x-javascript" src="chrome://keymanager/content/GeneralNameItem.js"/>
        </resources>
        -->
    	<!-- content, property, method and event descriptions go here -->
    	<content>
	    <xul:groupbox flex="1">
            <xul:grid anonid="keymgr.stdx509ext.crldistrpoints.grid"
	        flex="1"
		onchange="getBindingParent(this).computeCRLDistributionPointValue(this, event);"
		oncommand="getBindingParent(this).computeCRLDistributionPointValue(this, event);"
	    	> 
                <xul:columns>
                    <xul:column/>
                    <xul:column flex="1"/>
                </xul:columns>
                <xul:rows>
          	    <xul:row align="center">
                        <xul:label value="&keymgr.stdx509ext.crldistrpoints.distrpoint.label;"/> 
          	        <xul:generalnamesimple anonid="keymgr.stdx509ext.crldistrpoints.distrpoint"
			    xbl:inherits="type=distrpointtype,typetooltip=distrpointtypetooltip,typedisabled=distrpointtypedisabled,valuetooltip=distrpointvaluetooltip,valuedisabled=distrpointvaluedisabled,namevalue=distrpoint,certPropName=distrpointCertPropName,readonly,namesearchparam=distrpointnamesearchparam"
  	  	    	    namesearchparam="keymgr.stdx509ext.crldistrpoints.distrpoint"
			    valuetooltip="Enter CRL distribution point name"
			    xtype="directoryName"
			    type="uri"
			    />
                    </xul:row>
          	    <xul:row align="center">
                        <xul:label value="&keymgr.stdx509ext.crldistrpoints.crlissuer.label;"/> 
          	        <xul:generalnamesimple anonid="keymgr.stdx509ext.crldistrpoints.crlissuer"
			    xbl:inherits="type=crlissuertype,typetooltip=crlissuertypetooltip,typedisabled=crlissuertypedisabled,valuetooltip=crlissuervaluetooltip,valuedisabled=crlissuervaluedisabled,namevalue=crlissuer,certPropName=crlissuerCertPropName,readonly,namesearchparam=crlissuernamesearchparam"
			    typedisabled="true"
  	  	    	    namesearchparam="keymgr.stdx509ext.crldistrpoints.crlissuer"
			    valuetooltip="Enter CRL Issuer URL"
			    type="uri"
			    />
                    </xul:row>
          	    <xul:row align="center">
                        <xul:label value="&keymgr.stdx509ext.crldistrpoints.reason.label;"/> 
			<xul:distrpointreasons anonid="keymgr.stdx509ext.crldistrpoints.reason"
		    	    xbl:inherits="value=reasonvalue,hidden=reasonhidden,disabled=reasondisabled,tooltiptext=resontooltip"
			    />
			<!--
			<xul:hbox pack="start"
			    >
          	        <xul:menulist anonid="keymgr.stdx509ext.crldistrpoints.reason"
		    	    xbl:inherits="value=reasonvalue,hidden=reasonhidden,disabled=reasondisabled,tooltiptext=resontooltip"
			    >
		    	<xul:menupopup>
		    	</xul:menupopup>
		    	</xul:menulist>
			</xul:hbox>
			-->
                    </xul:row>
                </xul:rows>
            </xul:grid>
	    </xul:groupbox>
    	</content>
	<implementation>
	    <field name="mBaseExtnElem">
		document.getAnonymousElementByAttribute(this, "anonid", "keymgr.stdx509ext.crldistrpoints.grid");
	    </field>
	    <field name="mCRLIssuerElem">
		document.getAnonymousElementByAttribute(this, "anonid", "keymgr.stdx509ext.crldistrpoints.crlissuer");
	    </field>
	    <field name="mDistrPointNameElem">
		document.getAnonymousElementByAttribute(this, "anonid", "keymgr.stdx509ext.crldistrpoints.distrpoint");
	    </field>
	    <field name="mReasonElem">
		document.getAnonymousElementByAttribute(this, "anonid", "keymgr.stdx509ext.crldistrpoints.reason");
	    </field>

	    <property name="crlissuer"
	        onget="return this.mCRLIssuerElem.value;"
	        onset="this.mCRLIssuerElem.value=val; return val;"
		/>

	    <property name="value">
	        <getter>
		<![CDATA[
		this.computeCRLDistributionPointValue();
		return this.mFormattedValue;
		]]>
	        </getter>
	        <setter>
		<![CDATA[
		this.updateCRLDistributionPointValue(val);
		return val;
		]]>
	        </setter>
	    </property>

	    <property name="readonly"
	        onget="return this.mBaseExtnElem.readonly;"
	    	onset="this.mBaseExtnElem.readonly = val;
		       this.setReadonly(this.mBaseExtnElem, val);
	    	       if (val) {
		       	this.setAttribute('readonly',true);
		       }
                       else {
		       	this.removeAttribute('readonly');
		       	this.refresh();
		       }
			this.mCRLIssuerElem.readonly = val;
		       	return val;"
		/>

	    <constructor>
		<![CDATA[
		// this.mMaxLogLevel = 9;
		this.LogTrace("crldistrpointBinding.constructor():......................Start.");

		this.reset();

		this.LogTrace("crldistrpointBinding.constructor():......................End.");
		]]>
	    </constructor>

	    <method name="refresh">
	        <body>
		<![CDATA[
		]]>
	        </body>
	    </method>

	    <method name="reset">
	        <body>
		<![CDATA[
		]]>
	        </body>
	    </method>

	    <method name="computeCRLDistributionPointValue">
	        <body>
		<![CDATA[
		this.LogTrace("crldistrpointBinding.computeCRLDistributionPointValue():......................Start.");

		var crlIssuerNameValue = this.mCRLIssuerElem.namevalue;
		if (crlIssuerNameValue && (this.mCRLIssuerElem.namevalue == "")) {
		    crlIssuerNameValue = null;
		}
		var distrPointNameValue = this.mDistrPointNameElem.namevalue;
		if (this.mDistrPointNameElem.namevalue && (this.mDistrPointNameElem.namevalue == "")) {
		    distrPointNameValue = null;
		}
		var reasons = this.mReasonElem.value;
		this.LogDebug("crldistrpointBinding.computeCRLDistributionPointValue(): reasons: " + reasons + "");

		this.mFormattedValue = "";
		if (!this.mCRLIssuerElem.namevalue  && !distrPointNameValue) {
		    return;
		}

		if (crlIssuerNameValue) {
		    this.mFormattedValue = this.mCRLIssuerElem.typedvalue;
		}
		else {
		    this.mFormattedValue = " "; // delimiter at the  begining of string has no effect - so add a space
		}

		if (distrPointNameValue || (reasons >= 0)) {
		    this.mFormattedValue += "&";
		}
		if (distrPointNameValue) {
		    this.mFormattedValue += this.mDistrPointNameElem.typedvalue;
		}
		else {
		    this.mFormattedValue += " ";
		}

		if (reasons >= 0) {
		    this.mFormattedValue += "&";
		    this.mFormattedValue += reasons;
		}
		this.LogDebug("crldistrpointBinding.computeCRLDistributionPointValue(): this.mFormattedValue:\n" + this.mFormattedValue + "");

		this.LogTrace("crldistrpointBinding.computeCRLDistributionPointValue():......................End.");
                return true;
		]]>
	        </body>
	    </method>

	    <method name="updateCRLDistributionPointValue">
		<parameter name="aNewValue"/>
	        <body>
		<![CDATA[
		this.LogTrace("crldistrpointBinding.updateCRLDistributionPointValue():......................Start.");

		this.mFormattedValue = aNewValue;

		this.LogTrace("crldistrpointBinding.updateCRLDistributionPointValue():......................End.");
                return true;
		]]>
	        </body>
	    </method>


	    <method name="toCertProps">
		<parameter name="aCertProps"/>
	        <body>
		<![CDATA[
		this.computeCRLDistributionPointValue();
		this.certExtnToProps(this.mBaseExtnElem, aCertProps);
		]]>
	        </body>
	    </method>

	    <method name="updateCertProps">
		<parameter name="aCertProps"/>
	        <body>
		<![CDATA[
		this.updateCertExtnProps(this.mBaseExtnElem, aCertProps);
		this.refresh();
		]]>
	        </body>
	    </method>

	    <method name="mergeCertProps">
		<parameter name="aCertProps"/>
	        <body>
		<![CDATA[
		this.updateCertExtnProps(this.mBaseExtnElem, aCertProps, true);
		this.refresh();
		]]>
	        </body>
	    </method>


	</implementation>
    </binding>

    <binding id="crldistrpointsBinding"
	extends="chrome://keymanager/content/ExtnXBL/certextn.xml#certextnbaseBinding"
        >
        <!--
        <resources>
    	    <script type="application/x-javascript" src="chrome://keymanager/content/GeneralNameItem.js"/>
        </resources>
        -->
    	<!-- content, property, method and event descriptions go here -->
    	<content>
	    <xul:vbox anonid="certextn.stdx509extn.crldistrpoints"
		flex="1"
	        >
	        <xul:hbox
		    flex="1"
		    >
	            <xul:listbox anonid="certextn.stdx509extn.crldistrpoints.list"
			xbl:inherits="label=listlabel,tooltiptext=listtooltip,rows"
		        tooltiptext="&keymgr.cert.csr.form.tab.stdx509ext.crldistrpoints.list.tooltip;"
		        rows="3"
		        flex="1"
			>
	            </xul:listbox>
	            <xul:vbox anonid="keymgr.cert.csr.form.tab.stdx509ext.crldistrpoints.cmds"
		      xbl:inherits="hidden=readonly"
		      pack="start"
		      >
	              <xul:button anonid="keymgr.cert.csr.form.tab.stdx509ext.crldistrpoints.add"
			  xbl:inherits="label=addlabel,tooltiptext=addtooltip"
		          label="&keymgr.cert.csr.form.tab.stdx509ext.crldistrpoints.add.label;"
		          tooltiptext="&keymgr.cert.csr.form.tab.stdx509ext.crldistrpoints.add.tooltip;"
		    	  oncommand="getBindingParent(this).addNewItemToList(event);"
			  /> 
	              <xul:button anonid="keymgr.cert.csr.form.tab.stdx509ext.crldistrpoints.remove"
			  xbl:inherits="label=removelabel,tooltiptext=removetooltip"
		          label="&keymgr.cert.csr.form.tab.stdx509ext.crldistrpoints.remove.label;"
		          tooltiptext="&keymgr.cert.csr.form.tab.stdx509ext.crldistrpoints.remove.tooltip;"
		    	  oncommand="getBindingParent(this).deleteItemFromList(event);"
			  /> 
	            </xul:vbox>
	        </xul:hbox>
	        <xul:hbox collapsed="true">
	            <xul:textbox anonid="certextn.stdx509extn.crldistrpoints.value"
			xbl:inherits="certPropName=crldistrpointsCertPropName,value=crldistrpointsValue"
		    	collapsed="true" readonly="true"
		    	certPropName="crlDistributionPoints-value"
			/>
	        </xul:hbox>
	    </xul:vbox>
    	</content>
	<implementation>
	    <field name="mBaseExtnElem">
		document.getAnonymousElementByAttribute(this, "anonid", "certextn.stdx509extn.crldistrpoints");
	    </field>
	    <field name="mExtnValueItemListElem">
		document.getAnonymousElementByAttribute(this, "anonid", "certextn.stdx509extn.crldistrpoints.list");
	    </field>
	    <field name="mExtnValueElem">
		document.getAnonymousElementByAttribute(this, "anonid", "certextn.stdx509extn.crldistrpoints.value");
	    </field>

	    <property name="value"
		onget="return this.mExtnValueElem.value;"
	        onset="this.mExtnValueElem.value=val; this.updateValueList();return val;"
		/>

	    <property name="readonly"
	        onget="return this.mBaseExtnElem.readonly;"
	    	onset="this.mBaseExtnElem.readonly = val;
		       this.setReadonly(this.mBaseExtnElem, val);
	    	       if (val) {
		       	this.setAttribute('readonly',true);
		       }
                       else {
		       	this.removeAttribute('readonly');
		       	this.refresh();
		       }
		       return val;"
		/>

	    <constructor>
		<![CDATA[
		// this.mMaxLogLevel = 9;
		this.LogTrace("crldistrpointsBinding.constructor():......................Start.");

		this.refresh();

		this.LogTrace("crldistrpointsBinding.constructor():......................End.");
		]]>
	    </constructor>

	    <method name="refresh">
	        <body>
		<![CDATA[
		this.LogTrace("crldistrpointsBinding.refresh():......................Start.");

		this.removeAllItemsFromList();
		if (this.mExtnValueElem.value != "") {
		    this.updateValueList();
		}

		this.LogTrace("crldistrpointsBinding.refresh():......................End.");
		]]>
	        </body>
	    </method>

	    <method name="removeAllItemsFromList">
	        <body>
		<![CDATA[
		for (var i = (this.mExtnValueItemListElem.getRowCount() - 1); i >= 0; i--) {
		    this.mExtnValueItemListElem.removeItemAt(i);
		}
		]]>
	        </body>
	    </method>

	    <method name="reset">
	        <body>
		<![CDATA[
		this.LogTrace("crldistrpointsBinding.reset():......................Start.");

		this.removeAllItemsFromList();

		this.mExtnValueElem.value = "";

		this.LogTrace("crldistrpointsBinding.reset():......................End.");
		]]>
	        </body>
	    </method>

	    <method name="computeExtnValue">
	        <body>
		<![CDATA[
                this.LogTrace("crldistrpointsBinding.computeExtnValue():...........................Start."); 
                // Format:  <value-1>|<value-2>|.........|<value-n>


                var extnValueListText = "";
                var rowCount = this.mExtnValueItemListElem.getRowCount();
                this.LogDebug("crldistrpointsBinding.computeExtnValue(): rowCount: " + rowCount + ""); 
                for (var i = 0; i < rowCount; i++) {
    	            var rowItemElem = this.mExtnValueItemListElem.getItemAtIndex(i);
                    this.LogDebug("crldistrpointsBinding.computeExtnValue(): rowItemElem: " + rowItemElem.localName + ""); 
                    this.LogDebug("crldistrpointsBinding.computeExtnValue(): rowItemElem.value: " + rowItemElem.value + ""); 
		    if (i > 0) {
    	            	extnValueListText += "|";
		    }
	            extnValueListText += rowItemElem.value;

                }
		this.LogDebug("crldistrpointsBinding.computeExtnValue(): extnValueListText: " + extnValueListText + "");
                this.mExtnValueElem.value = extnValueListText;

                this.LogTrace("crldistrpointsBinding.computeExtnValue():...........................End."); 
		]]>
	        </body>
	    </method>

	    <method name="addFormattedItemValueToList">
		<parameter name="aFormattedItemValue"/>
	        <body>
		<![CDATA[
                var listItem = this.mExtnValueItemListElem.appendItem(aFormattedItemValue, aFormattedItemValue);

		listItem.setAttribute("tooltiptext", aFormattedItemValue);
		this.mExtnValueItemListElem.selectItem(listItem);
		this.mExtnValueItemListElem.ensureElementIsVisible(listItem);

                this.computeExtnValue();
		]]>
	        </body>
	    </method>

	    <method name="addFormattedItemsToList">
		<parameter name="aFormattedItemsStr"/>
	        <body>
		<![CDATA[
                this.LogTrace("crldistrpointsBinding.addFormattedItemsToList():...........................Start."); 

		this.mExtnValueElem.value = aFormattedItemsStr;
		this.refresh();

                this.LogTrace("crldistrpointsBinding.addFormattedItemsToList():...........................End."); 
		]]>
	        </body>
	    </method>

	    <method name="updateValueList">
	        <body>
		<![CDATA[
                this.LogTrace("crldistrpointsBinding.updateValueList():...........................Start."); 
                this.LogDebug("crldistrpointsBinding.updateValueList(): extnValueText: "  + this.mExtnValueElem.value + "");

                var extnValueItemList = this.mExtnValueElem.value.split("|");
                if (extnValueItemList.length <= 0) {
    	            return;
                }
                this.LogDebug("crldistrpointsBinding.updateValueList(): extnValueItemList.length: "  + extnValueItemList.length + "");
                for (var i = 0; i < extnValueItemList.length; i++) {
    	            var extnValueItemValue = extnValueItemList[i];
	            if (extnValueItemValue == "") {
	                continue;
	            }
	            this.LogDebug("crldistrpointsBinding.updateValueList(): i: "  + i + " extnValueItemValue: " + extnValueItemValue + "");
		    var listItem = this.mExtnValueItemListElem.appendItem(extnValueItemValue, extnValueItemValue);
		    listItem.setAttribute("tooltiptext", extnValueItemValue);
                }

                this.LogTrace("crldistrpointsBinding.updateValueList():...........................End."); 
		]]>
	        </body>
	    </method>

	    <method name="addItemToList">
		<parameter name="aCRLIssuer"/>
		<parameter name="aDistrPointName"/>
		<parameter name="aReason"/>
	        <body>
		<![CDATA[
		// TODO: 
		var formattedItemValue = "";
		this.addFormattedItemValueToList(formattedItemValue);
                return 1;
		]]>
	        </body>
	    </method>

	    <method name="addNewItemToList">
	        <body>
		<![CDATA[
                this.LogTrace("crldistrpointsBinding.addNewItemToList():...........................Start."); 

                var argc = 0;
    		var params = Components.classes["@mozilla.org/embedcomp/dialogparam;1"].
    			createInstance(Components.interfaces.nsIDialogParamBlock);
                params.SetInt(0, argc);

                window.openDialog('chrome://keymanager/content/ExtnXBL/CRLDistributionPoint.xul', "",
                    			'chrome,centerscreen,resizable,modal', params);

                var retVal = params.GetInt(0);
                if (retVal == 0) { // Selected Cancel or failed.
                   return 0;
                }

                var extnItemListValueStr = params.GetString(0);
                if (extnItemListValueStr == null) {
                   return 0;
                }

                this.LogDebug("crldistrpointsBinding.addNewItemToList(): " + 
                		"extnItemListValueStr: " + extnItemListValueStr + " " + 
				"");

		this.addFormattedItemValueToList(extnItemListValueStr);

                this.LogTrace("crldistrpointsBinding.addNewItemToList():...........................End."); 
                return 1;
		]]>
	        </body>
	    </method>

	    <method name="deleteItemFromList">
	        <body>
		<![CDATA[
                this.mExtnValueItemListElem.removeItemAt(this.mExtnValueItemListElem.selectedIndex);
                this.mExtnValueItemListElem.selectedIndex = -1;
                this.mExtnValueItemListElem.clearSelection();
            
                this.computeExtnValue();
		]]>
	        </body>
	    </method>

	    <method name="toCertProps">
		<parameter name="aCertProps"/>
	        <body>
		<![CDATA[
		// this.mMaxLogLevel = 9;

		this.computeExtnValue();
		this.certExtnToProps(this.mBaseExtnElem, aCertProps);

		// this.mMaxLogLevel = 4;
		]]>
	        </body>
	    </method>

	    <method name="updateCertProps">
		<parameter name="aCertProps"/>
	        <body>
		<![CDATA[
                this.LogTrace("crldistrpointsBinding.updateCertProps():...........................Start."); 

		this.updateCertExtnProps(this.mBaseExtnElem, aCertProps);
		this.refresh();

                this.LogTrace("crldistrpointsBinding.updateCertProps():...........................End."); 
		]]>
	        </body>
	    </method>

	    <method name="mergeCertProps">
		<parameter name="aCertProps"/>
	        <body>
		<![CDATA[
		this.updateCertExtnProps(this.mBaseExtnElem, aCertProps, true);
		this.refresh();
		]]>
	        </body>
	    </method>

	</implementation>
    </binding>

</bindings>


<?xml version="1.0"?>
<!-- @(#) $Id: SoftTokenDBManager.xul,v 1.10 2012/10/07 17:21:08 subrata Exp $ -->

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Avaya Labs Research, Avaya Inc. Code.
   -
   - The Initial Developer of the Original Code is
   - Subrata Mazumdar, Avaya Labs Research, Avaya Inc.
   - Portions created by the Initial Developer are Copyright (C) 2007.
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   Subrata Mazumdar (mazum@avaya.com)
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->


<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>

<!DOCTYPE overlay SYSTEM "chrome://pippki/locale/certManager.dtd">

<!--
Source: http://xulplanet.com/tutorials/xultu/overlay.html
-->

<!--
Installation instructions: 
Add the following line in the chrome.manifest file:
    overlay chrome://pippki/content/device_manager.xul  chrome://keymanager/content/tools/softtokendbmgr/SoftTokenDBManager.xul
-->

<overlay id="SoftTokenDBManagerWin"
    xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    zonload=""
    >

  <!--
  <script type="application/x-javascript" src="chrome://keymanager/content/BrowserPrefUtil.js"/>
  -->

<script type="application/x-javascript">
<![CDATA[

function handleSecDeviceSelectEvent(ev)
{
    avpki.keymanager.SoftTokenDBManager.handleDeviceSelect(ev);
}


var avpki = {};
avpki.keymanager = {};
avpki.keymanager.SoftTokenDBManager = {

    /* alrISoftTokenDBManager	*/ mSoftTokenDBManager : null,
    /* nsIPKCS11ModuleDB */ mPKCS11ModuleDB : null,


    mDeviceWindowElem			: null,
    mDeviceTreeElem			: null,
    mDeviceListElem			: null,
    mSoftTokenDBMgrEnabled		: false,
    mSoftTokenDBManagerDialogURI	: "chrome://keymanager/content/tools/softtokendbmgr/SoftTokenDBManagerDialog.xul",

    mMaxLogLevel : 2,
    log : function(level, msg)
    {
	if (level > avpki.keymanager.SoftTokenDBManager.mMaxLogLevel) {
        	return;
        }
        dump(msg + "\n");
    },

    logError : function(msg)
    {
        avpki.keymanager.SoftTokenDBManager.log(2, msg);
    },
    logTrace : function(msg)
    {
        avpki.keymanager.SoftTokenDBManager.log(4, msg);
    },
    logDebug : function(msg)
    {
        avpki.keymanager.SoftTokenDBManager.log(8, msg);
    },


    moveOverlayButtons : function(devMgrDialogElemId, dbManagerVBoxElemId, insertAfterButtonElemId) 
    {
        var devMgrDialogElem = document.getElementById(devMgrDialogElemId);

        var insertAfterButtonElem = document.getElementById(insertAfterButtonElemId);
        var devMgrButtonsVboxElem = insertAfterButtonElem.parentNode;

        var dbManagerVBoxElem = document.getElementById(dbManagerVBoxElemId);

        // Move the button element to the vbox  
        // devMgrButtonsVboxElem.insertAfter(dbManagerVBoxElem, insertAfterButtonElem);
        devMgrButtonsVboxElem.appendChild(dbManagerVBoxElem);
    },

    isSelectedModuleInternal : function()
    {
	var selectedSlotModule = avpki.keymanager.SoftTokenDBManager.getSelectedSlotModule();
	if (!selectedSlotModule) {
	    return false;
	}

    	var internalModule = null;
	if (avpki.keymanager.SoftTokenDBManager.mPKCS11ModuleDB.isFIPSEnabled) {
	    internalModule = avpki.keymanager.SoftTokenDBManager.mPKCS11ModuleDB.getInternalFIPS();
	}
	else {
	    internalModule = avpki.keymanager.SoftTokenDBManager.mPKCS11ModuleDB.getInternal();
	}

    	avpki.keymanager.SoftTokenDBManager.logDebug("avpki.keymanager.SoftTokenDBManager.isSelectedModuleInternal(): " +
					"internalModule.name: " + internalModule.name + " " + 
					"selectedSlotModule.name: " + selectedSlotModule.name + "" 
					);
	
	if (internalModule.name != selectedSlotModule.name) {
	    return false;
	}
	return true;
    },

    getSelectedSlotModule : function()
    {
	var module = null;
	var treeElem = document.getElementById('device_tree');

	if (treeElem.currentIndex < 0) return module;
	var item = treeElem.contentView.getItemAtIndex(treeElem.currentIndex);
	if (!item) {
	    return null;
	}
	var module_name;
	var cell;
	var kind = item.getAttribute("pk11kind");
	if (kind == "slot") {
	    // get the module cell for this slot cell
	    cell = item.parentNode.parentNode.firstChild.firstChild;
	}
	else {
	    cell = item.firstChild.firstChild;
	}
	module_name = cell.getAttribute("label");
    	avpki.keymanager.SoftTokenDBManager.logDebug("avpki.keymanager.SoftTokenDBManager.getSelectedSlotModule(): module_name: " + module_name);

	/*
	var secmoddb = Components.classes["@mozilla.org/security/pkcs11moduledb;1"]
				.getService(Components.interfaces.nsIPKCS11ModuleDB);
	*/
	module = avpki.keymanager.SoftTokenDBManager.mPKCS11ModuleDB.findModuleByName(module_name);
	return module;
    },

    handleDeviceSelect : function(ev)
    {
    	avpki.keymanager.SoftTokenDBManager.logTrace("avpki.keymanager.SoftTokenDBManager.handleDeviceSelect():......................Start.");

    	var dbManagerVBoxElem = document.getElementById("SoftTokenDBManagerVBox");
	dbManagerVBoxElem.collapsed = true;

    	if (!avpki.keymanager.SoftTokenDBManager.mSoftTokenDBMgrEnabled) {
	    return;
	}

	var unmountButtonElem = document.getElementById("SoftTokenDBManager.unmount");
	unmountButtonElem.setAttribute("disabled", true);

	getSelectedItem();


	if (avpki.keymanager.SoftTokenDBManager.isSelectedModuleInternal()) {
	    dbManagerVBoxElem.collapsed = false;
	}

	if (selected_module) { // not a slot 
	    return;
	}

	if (!selected_slot) { // no slot is  associated with the selected item in the device tree.
    	    avpki.keymanager.SoftTokenDBManager.logTrace("avpki.keymanager.SoftTokenDBManager.handleDeviceSelect():......................End(1).");
	    return;
	}

	var selected_token = selected_slot.getToken();
	if (!selected_token) {  // no token is associated with the slot
    	    avpki.keymanager.SoftTokenDBManager.logTrace("avpki.keymanager.SoftTokenDBManager.handleDeviceSelect():......................End(2).");
	    return;
	}

	if (!selected_token.needsLogin()) { // selected token is not a mounted soft-token
    	    avpki.keymanager.SoftTokenDBManager.logTrace("avpki.keymanager.SoftTokenDBManager.handleDeviceSelect():......................End(3).");
	    return;
	}

	// All mounted soft-tokens are associated with slot that has id with prefix "NSS Application Slot"
	var slotDesc = selected_slot.desc;
	if (slotDesc.indexOf("NSS Application Slot") != 0) {
    	    avpki.keymanager.SoftTokenDBManager.logTrace("avpki.keymanager.SoftTokenDBManager.handleDeviceSelect():......................End(5).");
	    return;
	}

	// If the slot is either disabled or not present, then ignore it
	if ((selected_slot.status == Components.interfaces.nsIPKCS11Slot.SLOT_DISABLED) 
	    || (selected_slot.status == Components.interfaces.nsIPKCS11Slot.SLOT_NOT_PRESENT) 
	    ) {
    	    avpki.keymanager.SoftTokenDBManager.logTrace("avpki.keymanager.SoftTokenDBManager.handleDeviceSelect():......................End(6).");
	    return;
	}
		

	// Finally, the selected slot is an active slot associated with soft-token 
	// that can be unmounted. Activate the 'unmount' button.
	unmountButtonElem.removeAttribute("disabled");

    	avpki.keymanager.SoftTokenDBManager.logTrace("avpki.keymanager.SoftTokenDBManager.handleDeviceSelect():......................End.");
    },

    initOverlay : function()
    {
    	avpki.keymanager.SoftTokenDBManager.logTrace("avpki.keymanager.SoftTokenDBManager.initOverlay():......................Start.");

    	avpki.keymanager.SoftTokenDBManager.mPKCS11ModuleDB = Components.classes["@mozilla.org/security/pkcs11moduledb;1"]
				.getService(Components.interfaces.nsIPKCS11ModuleDB);

    	var dbManagerVBoxElem = document.getElementById("SoftTokenDBManagerVBox");
	dbManagerVBoxElem.collapsed = true;

	avpki.keymanager.SoftTokenDBManager.mDeviceWindowElem = document.getElementById("devicemanager");
	avpki.keymanager.SoftTokenDBManager.mDeviceTreeElem = document.getElementById("device_tree");
	avpki.keymanager.SoftTokenDBManager.mDeviceListElem = document.getElementById("device_list");

	// Place the SoftTokenDBMgr buttons under the other buttons
    	avpki.keymanager.SoftTokenDBManager.moveOverlayButtons("devicemanager", "SoftTokenDBManagerVBox", "fipsbutton");

	try {
	    var Prefs = Components.classes["@mozilla.org/preferences-service;1"]
                   		.getService(Components.interfaces.nsIPrefService);
	    var prefsBranch = Prefs.getBranch("extensions.avpki.softtokendbmgr.");
	    avpki.keymanager.SoftTokenDBManager.mSoftTokenDBMgrEnabled = prefsBranch.getBoolPref("enabled");
	} catch (e) {
	    avpki.keymanager.SoftTokenDBManager.mSoftTokenDBMgrEnabled = false;
      	}
    	avpki.keymanager.SoftTokenDBManager.logDebug("avpki.keymanager.SoftTokenDBManager.initOverlay(): avpki.keymanager.SoftTokenDBManager.mSoftTokenDBMgrEnabled: " + avpki.keymanager.SoftTokenDBManager.mSoftTokenDBMgrEnabled + "");

	/*
	if (avpki.keymanager.SoftTokenDBManager.mPKCS11ModuleDB.isFIPSEnabled) {
	    avpki.keymanager.SoftTokenDBManager.mSoftTokenDBMgrEnabled = false;
	}
	*/

    	if (!avpki.keymanager.SoftTokenDBManager.mSoftTokenDBMgrEnabled) {
    	    avpki.keymanager.SoftTokenDBManager.logTrace("avpki.keymanager.SoftTokenDBManager.initOverlay():......................End(1).");
	    return;
	}

    	if (avpki.keymanager.SoftTokenDBManager.mSoftTokenDBMgrEnabled) {
	    try {
    	        avpki.keymanager.SoftTokenDBManager.mSoftTokenDBManager = Components.classes["@avaya.com/pkm/softtokendbmanager;1"]
		        .getService(Components.interfaces.alrISoftTokenDBManager);
	    } catch (e) {
	        avpki.keymanager.SoftTokenDBManager.mSoftTokenDBMgrEnabled = false;
	        avpki.keymanager.SoftTokenDBManager.mSoftTokenDBManager = null;
      	    }
    	    if (!avpki.keymanager.SoftTokenDBManager.mSoftTokenDBManager) {
    	        avpki.keymanager.SoftTokenDBManager.logError("Failed to load XPCOM implemnatation (@avaya.com/pkm/softtokendbmanager;1) of alrISoftTokenDBManager.");
	    	avpki.keymanager.SoftTokenDBManager.mSoftTokenDBMgrEnabled = false;
	    }
	}
    	if (avpki.keymanager.SoftTokenDBManager.mSoftTokenDBMgrEnabled) {
	    avpki.keymanager.SoftTokenDBManager.mDeviceTreeElem.addEventListener("select", handleSecDeviceSelectEvent, false);
	}


	avpki.keymanager.SoftTokenDBManager.handleDeviceSelect();

    	avpki.keymanager.SoftTokenDBManager.logTrace("avpki.keymanager.SoftTokenDBManager.initOverlay():......................End.");
    	return;
    },

    refreshDeviceList : function()
    {
	ClearDeviceList();
	RefreshDeviceList();
    },

    createSoftTokenDB : function(ev)
    {
        avpki.keymanager.SoftTokenDBManager.mountSoftTokenDBWithCmd(true);
    },

    mountSoftTokenDB : function(ev)
    {
        avpki.keymanager.SoftTokenDBManager.mountSoftTokenDBWithCmd(false);
    },

    mountSoftTokenDBWithCmd : function(aCreateSofTokenDB)
    {
        avpki.keymanager.SoftTokenDBManager.logTrace("avpki.keymanager.SoftTokenDBManager.mountSoftTokenDBWithCmd():......................Start.");
        /*
        nssArgs="configdir='$MODUTIL_CERT_DB2_DIR' certPrefix='' keyPrefix='' secmod='secmod.db'"
        */

        var pkiParams = Components.classes["@mozilla.org/security/pkiparamblock;1"]
    				.createInstance(Components.interfaces.nsIPKIParamBlock);
        var dialogParams = pkiParams.QueryInterface(Components.interfaces.nsIDialogParamBlock);

	if (aCreateSofTokenDB) {
	    dialogParams.SetInt(0, 0);
	}
	else {
	    dialogParams.SetInt(0, 1);
	}
    	avpki.keymanager.SoftTokenDBManager.mDeviceWindowElem.setAttribute("wait-cursor", true);
	window.openDialog(
		avpki.keymanager.SoftTokenDBManager.mSoftTokenDBManagerDialogURI,
		"Mount SoftToken DB Dialog",
		"chrome,centerscreen,resizable,modal",
		dialogParams
		);
    	avpki.keymanager.SoftTokenDBManager.mDeviceWindowElem.removeAttribute("wait-cursor");
    	if (dialogParams.GetInt(0) == 0) { // Selected Cancel or failed.
            avpki.keymanager.SoftTokenDBManager.logTrace("avpki.keymanager.SoftTokenDBManager.mountSoftTokenDBWithCmd():......................End(Cancel).");
    	    return;
    	}

	avpki.keymanager.SoftTokenDBManager.refreshDeviceList();

    	var tokenName = dialogParams.GetString(0);
    	var softTokenDBInfo = dialogParams.GetString(1);

	/*
	var tokenLabelElemList = avpki.keymanager.SoftTokenDBManager.mDeviceListElem.getElementsByAttribute("label", tokenName);
        avpki.keymanager.SoftTokenDBManager.logDebug("avpki.keymanager.SoftTokenDBManager.mountSoftTokenDBWithCmd(): tokenLabelElemList.length: " + tokenLabelElemList.length + "");
	var mountedTokenLabelElem = tokenLabelElemList.item(0);
        avpki.keymanager.SoftTokenDBManager.logDebug("avpki.keymanager.SoftTokenDBManager.mountSoftTokenDBWithCmd(): mountedTokenLabelElem: " + mountedTokenLabelElem + "");
	var tokenItemElem = mountedTokenLabelElem.parentNode.parentNode;

	var kind = tokenItemElem.getAttribute("pk11kind");
        avpki.keymanager.SoftTokenDBManager.logDebug("avpki.keymanager.SoftTokenDBManager.mountSoftTokenDBWithCmd(): kind: " + kind + "");

	tokenItemElem.setAttribute("extsofttoken", true);
	*/

        avpki.keymanager.SoftTokenDBManager.logTrace("avpki.keymanager.SoftTokenDBManager.mountSoftTokenDBWithCmd():......................End.");
    },

    unmountSoftTokenDB : function(ev)
    {
        avpki.keymanager.SoftTokenDBManager.logTrace("avpki.keymanager.SoftTokenDBManager.unmountSoftTokenDB():......................Start.");

	if (!selected_slot) {
	    return;
	}

	var slotDesc = selected_slot.desc;
	if (slotDesc.indexOf("NSS Application Slot") != 0) {
            avpki.keymanager.SoftTokenDBManager.logTrace("avpki.keymanager.SoftTokenDBManager.unmountSoftTokenDB():......................End(0).");
	    return;
	}

	var selectedExternalSoftToken = selected_slot.getToken();
	if (!selectedExternalSoftToken) {
	    alert("No Token is selected.");
	    avpki.keymanager.SoftTokenDBManager.logTrace("avpki.keymanager.SoftTokenDBManager.unmountSoftTokenDB():......................End(1).");
	    return;
	}

    	var promptService = Components.classes["@mozilla.org/embedcomp/prompt-service;1"].
    				getService(Components.interfaces.nsIPromptService);
    	 var removePermanently = promptService.confirm(window,
		     "Remove the SoftToken",
		     "Do you want to remove the SoftToken permanently?"
		     );
	if (removePermanently) {
	    avpki.keymanager.SoftTokenDBManager.removeSoftTokenDBInfo(selectedExternalSoftToken.tokenName);
	}

	try {
	    avpki.keymanager.SoftTokenDBManager.mSoftTokenDBManager.unmountSoftTokenDB(
	    		selectedExternalSoftToken
			);
	} catch (ex) {
            avpki.keymanager.SoftTokenDBManager.logError("avpki.keymanager.SoftTokenDBManager.unmountSoftTokenDB(): avpki.keymanager.SoftTokenDBManager.mSoftTokenDBManager.unmountSoftTokenDB() failed - ex: " + ex + "");
	    return;
	}

	avpki.keymanager.SoftTokenDBManager.refreshDeviceList();

        avpki.keymanager.SoftTokenDBManager.logTrace("avpki.keymanager.SoftTokenDBManager.unmountSoftTokenDB():......................End.");
	return;
    },

    /*
    getSelectedToken : function()
    {
    },

    getSelectedExternalSoftToken : function()
    {
	var selectedToken = avpki.keymanager.SoftTokenDBManager.getSelectedToken();
	if (!selectedToken) {
	    return;
	}
	return selectedToken;
    },
    */

    removeSoftTokenDBInfo : function(aSoftTokenName)
    {
	avpki.keymanager.SoftTokenDBManager.logTrace("avpki.keymanager.SoftTokenDBManagerDialog.removeSoftTokenDBInfo():......................Start.");

	var Prefs = Components.classes["@mozilla.org/preferences-service;1"]
                   		.getService(Components.interfaces.nsIPrefService);
	var prefsBranch = Prefs.getBranch("extensions.avpki.softtokendbmgr.");

	var softTokenDBInfoList = "";
	try {
	    softTokenDBInfoList = prefsBranch.getCharPref("dbinfolist");
	    if (!softTokenDBInfoList) {
		softTokenDBInfoList = "";
	    }
	} catch (e) { }

	if (softTokenDBInfoList == "") {
	    avpki.keymanager.SoftTokenDBManager.logTrace("avpki.keymanager.SoftTokenDBManagerDialog.removeSoftTokenDBInfo():......................End(1).");
	    return;
	}

	var softTokenDBInfoItemList = softTokenDBInfoList.split("|");
	if (softTokenDBInfoItemList.length <= 0) {
	    avpki.keymanager.SoftTokenDBManager.logTrace("avpki.keymanager.SoftTokenDBManagerDialog.removeSoftTokenDBInfo():......................End(2).");
	    return;
	}

	var newSoftTokenDBInfoList = "";
	for (var i = 0; i < softTokenDBInfoItemList.length; i++) {
	    var softTokenDBInfoItem = softTokenDBInfoItemList[i];
	    var softTokenDBInfoCompList = softTokenDBInfoItem.split(",");
	    if (softTokenDBInfoCompList.length < 2) {
	    	continue;
	    }
	    if (softTokenDBInfoCompList[1] == aSoftTokenName) {
	    	continue;
	    }
	    if (newSoftTokenDBInfoList != "") {
	    	newSoftTokenDBInfoList += "|";
	    }
	    newSoftTokenDBInfoList += softTokenDBInfoItem;
	}
	avpki.keymanager.SoftTokenDBManager.logDebug("avpki.keymanager.SoftTokenDBManagerDialog.removeSoftTokenDBInfo(): newSoftTokenDBInfoList: " + newSoftTokenDBInfoList + "");

	prefsBranch.setCharPref("dbinfolist", newSoftTokenDBInfoList);

	avpki.keymanager.SoftTokenDBManager.logTrace("avpki.keymanager.SoftTokenDBManagerDialog.removeSoftTokenDBInfo():......................End.");
    }

};

]]>
</script>

  <dialog id="devicemanager"
      onload="LoadModules();avpki.keymanager.SoftTokenDBManager.initOverlay();"
      >
      <vbox id="SoftTokenDBManagerVBox"
	  pack="Start"
          insertafter="fipsbutton"
	  collapsed="true"
          >
          <button id="SoftTokenDBManager.create"
              label="Create External NSS Soft-Token"
	      xhidden="true"
              oncommand="avpki.keymanager.SoftTokenDBManager.createSoftTokenDB(event);"
	      />
          <button id="SoftTokenDBManager.mount"
              label="Mount External NSS Soft-Token"
              oncommand="avpki.keymanager.SoftTokenDBManager.mountSoftTokenDB(event);"
	      />
          <button id="SoftTokenDBManager.unmount"
              label="Unmount External NSS Soft-Token"
	      disabled="true"
              oncommand="avpki.keymanager.SoftTokenDBManager.unmountSoftTokenDB(event);"
	      />
      </vbox>
  </dialog>

</overlay>


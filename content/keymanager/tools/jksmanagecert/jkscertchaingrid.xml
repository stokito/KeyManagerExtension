<?xml version="1.0"?>
<!-- @(#) $Id: jkscertchaingrid.xml,v 1.3 2009/03/02 01:49:03 subrata Exp $ -->

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Avaya Labs Research, Avaya Inc. Code.
   -
   - The Initial Developer of the Original Code is
   - Subrata Mazumdar, Avaya Labs Research, Avaya Inc.
   - Portions created by the Initial Developer are Copyright (C) 2007.
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   Subrata Mazumdar (mazum@avaya.com)
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->



<bindings id="jkscertchaingridBindings"
    xmlns="http://www.mozilla.org/xbl"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    xmlns:xbl="http://www.mozilla.org/xbl">

	<!--
        <resources>
        </resources>
	-->

    <binding id="jkscertitemBinding">
    	<!-- content, property, method and event descriptions go here -->
    	<content>
	    <xul:hbox anonid="keymgr.jksdemo.jkscertitem.hbox"
		pack="start"
	    	>
	        <xul:certitem anonid="keymgr.jksdemo.jkscertitem.certitem"
		    />
		<xul:textbox anonid="keymgr.jksdemo.jkscertitem.alias"
		    />
		<xul:checkbox anonid="keymgr.jksdemo.jkscertitem.import"
		    checked="true"
		    label="Import Cert?"
		    />
	    </xul:hbox>
    	</content>

	<implementation>
	    <field name="mJKSCertItemHBoxElem">
		document.getAnonymousElementByAttribute(this, "anonid", "keymgr.jksdemo.jkscertitem.hbox");
	    </field>
	    <field name="mJKSCertItemElem">
		document.getAnonymousElementByAttribute(this, "anonid", "keymgr.jksdemo.jkscertitem.certitem");
	    </field>
	    <field name="mJKSCertAliasElem">
		document.getAnonymousElementByAttribute(this, "anonid", "keymgr.jksdemo.jkscertitem.alias");
	    </field>
	    <field name="mJKSCertImportElem">
		document.getAnonymousElementByAttribute(this, "anonid", "keymgr.jksdemo.jkscertitem.import");
	    </field>

	    <property name="cert" 
	        onget="return this.mJKSCertItemElem.cert;"
	        onset="this.mJKSCertItemElem.cert=val;
			if (val) {
			this.handleCertItemChange(this.mJKSCertItemElem);
			this.certalias=this.mJKSCertItemElem.adaptNickName().toLowerCase();
			}
			return val;"
		/>

	    <property name="certalias" 
	        onget="return this.mJKSCertAliasElem.value;"
	        onset="if (val) {
			this.mJKSCertAliasElem.value=val;
			}
			else {
			   this.mJKSCertAliasElem.value='';
			}
			this.handleCertAliasChange(this.mJKSCertAliasElem);
			return val;"
		/>
	    <property name="importcert" 
	        onget="return this.mJKSCertImportElem.checked;"
	        onset="this.mJKSCertImportElem.checked=val;"
		/>

	    <constructor>
		<![CDATA[
		// dump("jkscertitemBinding:constructor():..............Start.\n");
		// dump("jkscertitemBinding:constructor():..............End.\n");
		]]>
	    </constructor>

	    <method name="refresh">
	        <body>
		<![CDATA[
		]]>
	        </body>
	    </method>

	    <method name="handleCertItemChange">
		<parameter name="aJKSCertItemElem"/>
	        <body>
		<![CDATA[
		]]>
	        </body>
	    </method>
	    <method name="handleCertAliasChange">
		<parameter name="aJKSCertAliasElem"/>
	        <body>
		<![CDATA[
		]]>
	        </body>
	    </method>

	</implementation>
    </binding>

    <binding id="jkscertchaingridBinding">
    	<!-- content, property, method and event descriptions go here -->
    	<content>
	    <xul:vbox anonid="keymgr.jksdemo.certchaingrid.vbox">
	    </xul:vbox>
    	</content>

	<implementation>
	    <field name="mXulDocNsURI" readonly="true">
	    	"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
	    </field>

	    <field name="mCertChainGridVBoxElem">
		document.getAnonymousElementByAttribute(this, "anonid", "keymgr.jksdemo.certchaingrid.vbox");
	    </field>
	    <field name="mCertChain"/>
	    <field name="mIncludeCertChain"/>

	    <property name="certchain" 
	        onget="return this.mCertChain;"
	        onset="this.mCertChain=val; this.handleCertChainChange(this.mCertChain); return val;"
		/>

	    <!--
	    <property name="value"
	        onget="return this.getAttribute('value');"
	        onset="return this.getAttribute('value', val);"
		/>

	    <property name="value">
	        <getter>
		<![CDATA[
		    return this.mCertUsageMenuListElem.value;
		]]>
	        </getter>
	        <setter>
		<![CDATA[
		    if (val) {
		    	this.mCertUsageMenuListElem.value = val;
		    }
		    else {
		    	this.mCertUsageMenuListElem.value = "";
		    }
		    this.handleCertUsageChange(this.mCertUsageMenuListElem);
		    return val;
		]]>
	        </setter>
	    </property>
	    -->

	    <constructor>
		<![CDATA[
		// dump("jkscertchaingridBinding:constructor():..............Start.\n");
		// dump("jkscertchaingridBinding:constructor():..............End.\n");
		]]>
	    </constructor>

	    <method name="refresh">
	        <body>
		<![CDATA[
		]]>
	        </body>
	    </method>

	    <method name="reset">
	        <body>
		<![CDATA[
		// dump("jkscertchaingridBinding:reset():..............Start.\n");

		var totChildNodes = this.mCertChainGridVBoxElem.childNodes.length;
                for (var i = (totChildNodes -1); ((i >= 0) && (this.mCertChainGridVBoxElem.childNodes.length > 0)); i--) {
                    var childNode = this.mCertChainGridVBoxElem.childNodes.item(i);
                    this.mCertChainGridVBoxElem.removeChild(childNode);
                }

		// dump("jkscertchaingridBinding:reset():..............End.\n");
		]]>
	        </body>
	    </method>

	    <method name="initBaseCert">
		<parameter name="aX509Cert"/>
		<parameter name="aCertAlias"/>
		<parameter name="aIncludeCertChain"/>
	        <body>
		<![CDATA[
		// dump("jkscertchaingridBinding:initBaseCert():..............Start.\n");

		var certChain = aX509Cert.getChain();
		this.mIncludeCertChain = aIncludeCertChain;

		this.certchain = certChain;
		if (this.mCertChainGridVBoxElem.firstChild) {
		    this.mCertChainGridVBoxElem.firstChild.certalias = aCertAlias;
		}

		// dump("jkscertchaingridBinding:initBaseCert():..............End.\n");
		]]>
	        </body>
	    </method>

	    <method name="handleCertChainChange">
		<parameter name="aCertChain"/>
	        <body>
		<![CDATA[
		// dump("jkscertchaingridBinding:handleCertChainChange():..............Start.\n");

		this.reset();

		var /* nsISimpleEnumerator */ certEnum = aCertChain.enumerate();
		try {
		    while (certEnum.hasMoreElements()) {
		    	var supports = certEnum.getNext();
			var nextCert = supports.QueryInterface(Components.interfaces.nsIX509Cert);

			var jksCertItemElem = document.createElementNS(this.mXulDocNsURI, "jkscertitem");
			jksCertItemElem = this.mCertChainGridVBoxElem.appendChild(jksCertItemElem);
			jksCertItemElem.cert = nextCert;

			if (!this.mIncludeCertChain) {
			    break;
			}
		    }
		} catch (ex) {
		    dump("jkscertchaingridBinding:handleCertChainChange():  - ex: " + ex + "\n");
		}

		// dump("jkscertchaingridBinding:handleCertChainChange():..............End.\n");
		]]>
	        </body>
	    </method>

	    <method name="getJKSCertItemList">
	        <body>
		<![CDATA[
		// dump("jkscertchaingridBinding:getJKSCertItemList():..............Start.\n");

		var jksCertItemList = this.mCertChainGridVBoxElem.getElementsByTagName("xul:jkscertitem");
		if (jksCertItemList.length == 0) {
		    jksCertItemList = this.mCertChainGridVBoxElem.getElementsByTagName("jkscertitem");
		}
		// dump("jkscertchaingridBinding:getJKSCertItemList(): jksCertItemList.length: " + jksCertItemList.length + "\n");
		if (jksCertItemList.length == 0) {
		    return jksCertItemList;
		}

		for (var i = (jksCertItemList.length -1); (i >= 0); i--) {
		    var jksCertItem = jksCertItemList.item(i);
		    if (!jksCertItem.importcert) {
		    	this.mCertChainGridVBoxElem.removeChild(jksCertItem);
		    }
		}

		// dump("jkscertchaingridBinding:getJKSCertItemList():..............End.\n");
		return jksCertItemList;
		]]>
	        </body>
	    </method>

	</implementation>
    </binding>

</bindings>
